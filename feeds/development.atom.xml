<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>techLog</title><link href="http://ptyagicodecamp.github.io/" rel="alternate"></link><link href="http://ptyagicodecamp.github.io/feeds/development.atom.xml" rel="self"></link><id>http://ptyagicodecamp.github.io/</id><updated>2017-06-16T07:28:00-06:00</updated><entry><title>How did I integrated a launcher screen in an Android App under 5 minutes</title><link href="http://ptyagicodecamp.github.io/how-did-i-integrated-a-launcher-screen-in-an-android-app-under-5-minutes.html" rel="alternate"></link><published>2017-06-16T07:28:00-06:00</published><updated>2017-06-16T07:28:00-06:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2017-06-16:how-did-i-integrated-a-launcher-screen-in-an-android-app-under-5-minutes.html</id><summary type="html">&lt;h3&gt;Why Launcher Screen&lt;/h3&gt;
&lt;p&gt;A launch screen is the splash screen that is presented (optionally) to user when an app starts up. The main purpose for this screen is to keep user entertained while data is loading in the background and hence leave a good impression to your first time users. If your app takes some time to show the contents, then user is usually shown a blank screen. A blank screen may discourage users to wait and they just might get out of the app to not to return again, which could be very sad for your app.
So, to make the waiting process bit less boring, the launcher screen (aka splash screen) can either be used to show app's logo to promote your brand or some interesting contents that makes user's waiting period more interesting.&lt;/p&gt;
&lt;h3&gt;How to implement Launcher Screen&lt;/h3&gt;
&lt;p&gt;Actually, its pretty straight-forward to implement a luncher screen. It's as simple as setting theme for the launcher activity in AndroidManifest.xml.
Let's see the steps:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Step #1:&lt;/em&gt;&lt;/strong&gt; Create the first activity that will launch your app. I'm using &lt;code&gt;LauncherActivity&lt;/code&gt; as my launcher activity. This activity doesn't need a layout file of its own since it redirect flow to &lt;code&gt;MainActivity&lt;/code&gt; (See Step #5 to know how its being done). It is declared with intent-filter category &lt;code&gt;android.intent.category.LAUNCHER&lt;/code&gt; in &lt;code&gt;AndroidManifest.xml&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;activity&lt;/span&gt;
  &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.LauncherActivity&amp;quot;&lt;/span&gt;
  &lt;span class="na"&gt;android:theme=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@style/LauncherScreenTheme&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;action&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.intent.action.MAIN&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

          &lt;span class="nt"&gt;&amp;lt;category&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.intent.category.LAUNCHER&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;Step #2:&lt;/em&gt;&lt;/strong&gt; Create main activity for your app. I'm calling it &lt;code&gt;MainActivity&lt;/code&gt;. This is the activity which presents the real app contents of the app. It could be data loaded in background when app is launching.
Don't forget to add this activity in your &lt;code&gt;AndroidManifest.xml&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;activity&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.MainActivity&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;Step #3:&lt;/em&gt;&lt;/strong&gt; Now, we need to create a drawable for the launcher screen. A logo or any graphic that you want to show user in splash screen, needs to be set as background in this res file. Create the launcher screen xml resource file: &lt;code&gt;launch_screen.xml&lt;/code&gt; under &lt;code&gt;res/drawable&lt;/code&gt; folder. Basically, background set in here will be displayed as splash/launcher screen. I'm just using default android launcher logo for demonstration purpose. It could be your brand logo or any other graphic of your choice.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;layer-list&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;color&lt;/span&gt; &lt;span class="na"&gt;android:color=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@color/colorAccent&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;bitmap&lt;/span&gt;
            &lt;span class="na"&gt;android:src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@mipmap/ic_launcher&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:tileMode=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;disabled&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:gravity=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;center&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/layer-list&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;Step #4:&lt;/em&gt;&lt;/strong&gt; Create a theme &lt;code&gt;LauncherScreenTheme&lt;/code&gt; for &lt;code&gt;LauncherActivity&lt;/code&gt;. Set &lt;code&gt;LauncherActivity&lt;/code&gt; theme to &lt;code&gt;LauncherScreenTheme&lt;/code&gt; in &lt;code&gt;AndroidManifest.xml&lt;/code&gt; as shown in Step #1. &lt;code&gt;LauncherScreenTheme&lt;/code&gt; theme is defined in &lt;code&gt;styles.xml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;style&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;LauncherScreenTheme&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;parent=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Theme.AppCompat.Light.NoActionBar&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android:windowBackground&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@drawable/launch_screen&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;Step #5:&lt;/em&gt;&lt;/strong&gt; Redirect to &lt;code&gt;MainActivity&lt;/code&gt; from &lt;code&gt;LauncherActivity&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class LauncherActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        //Present user UI which uses data loaded in the background.
        startActivity(new Intent(this, MainActivity.class));
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And That's all you needed to do to setup a launcher screen for your app.&lt;/p&gt;
&lt;p&gt;Here's how the launcher screen looks for the sample app:
&lt;img alt="" src="../images/launcher_screen/launcher_screen.png" /&gt;&lt;/p&gt;
&lt;p&gt;Checkout the Source code for sample app available at &lt;a href="https://github.com/ptyagicodecamp/android-recipes/tree/develop/LauncherScreen"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;References:&lt;/em&gt;&lt;/strong&gt;
&lt;a href="https://material.io/guidelines/patterns/launch-screens.html"&gt;Launch Screen Patterns&lt;/a&gt;&lt;/p&gt;</summary><category term="android"></category><category term="launcher screen"></category><category term="dev"></category><category term="design"></category></entry><entry><title>Adding Menu Items in Navigation Drawer Dynamically</title><link href="http://ptyagicodecamp.github.io/adding-menu-items-in-navigation-drawer-dynamically.html" rel="alternate"></link><published>2017-04-19T00:00:00-06:00</published><updated>2017-04-19T00:00:00-06:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2017-04-19:adding-menu-items-in-navigation-drawer-dynamically.html</id><summary type="html">&lt;h1&gt;Adding Menu Items in Navigation Drawer Dynamically&lt;/h1&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Android Studio provides support to add Navigation Drawer Activity from IDE itself. With such Activity,
it automatically generates menu items for navigation drawer in form of a xml file resource located
inside &lt;code&gt;res/menu&lt;/code&gt; directory. By default, this xml file is named &lt;code&gt;activity_main_drawer.xml&lt;/code&gt;, and contains
menu items statically like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;menu&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;group&lt;/span&gt; &lt;span class="na"&gt;android:checkableBehavior=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;single&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt;
            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/nav_camera&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:icon=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@drawable/ic_menu_camera&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Import&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt;
            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/nav_gallery&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:icon=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@drawable/ic_menu_gallery&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Gallery&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt;
            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/nav_slideshow&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:icon=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@drawable/ic_menu_slideshow&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Slideshow&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt;
            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/nav_manage&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:icon=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@drawable/ic_menu_manage&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Tools&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/group&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;android:title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Communicate&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;menu&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt;
                &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/nav_share&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:icon=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@drawable/ic_menu_share&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Share&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt;
                &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/nav_send&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:icon=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@drawable/ic_menu_send&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Send&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/menu&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/menu&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What if you want to generate or add more menu items dynamically ? If you're like me, then you would
not want to have support to add menu items without making changes in static file. One reason for doing so
is to be able to read new menu items data from remote servers and generate UI on the fly. In other words,
automating UI generation !&lt;/p&gt;
&lt;p&gt;Actually, its pretty simple to do so !&lt;/p&gt;
&lt;h4&gt;Show me code&lt;/h4&gt;
&lt;p&gt;Here’s code that’s responsible for generating new menu items on the fly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private void addMenuItemInNavMenuDrawer() {
    NavigationView navView = (NavigationView) findViewById(R.id.nav_view);

    Menu menu = navView.getMenu();
    Menu submenu = menu.addSubMenu(&amp;quot;New Super SubMenu&amp;quot;);

    submenu.add(&amp;quot;Super Item1&amp;quot;);
    submenu.add(&amp;quot;Super Item2&amp;quot;);
    submenu.add(&amp;quot;Super Item3&amp;quot;);

    navView.invalidate();
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Call &lt;code&gt;addMenuItemInNavMenuDrawer&lt;/code&gt; in &lt;code&gt;onCreate()&lt;/code&gt; method before launching your app.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        ....

        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);

        addMenuItemInNavMenuDrawer();
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that's pretty much it !&lt;/p&gt;
&lt;h5&gt;Before Adding New Submenu&lt;/h5&gt;
&lt;p&gt;&lt;a href="https://github.com/ptyagicodecamp/ptyagicodecamp.github.io/blob/master/images/navdrawermenu/before_adding_menus.png"&gt;Here's&lt;/a&gt;
how Navigation drawer looks like before adding new sub menu.&lt;/p&gt;
&lt;h5&gt;After Adding New Submenu&lt;/h5&gt;
&lt;p&gt;&lt;a href="https://github.com/ptyagicodecamp/ptyagicodecamp.github.io/blob/master/images/navdrawermenu/after_adding_menus.png"&gt;Here's&lt;/a&gt; Navigation Drawer after adding brand new submenu.&lt;/p&gt;
&lt;p&gt;You can checkout source code at &lt;a href="https://github.com/ptyagicodecamp/android-recipes/tree/develop/NavDrawerDynamicMenu"&gt;github here&lt;/a&gt;&lt;/p&gt;</summary><category term="Android"></category><category term="Material Design"></category><category term="UI/UX"></category></entry><entry><title>Scheduling Repeating Local Notifications using Alarm Manager</title><link href="http://ptyagicodecamp.github.io/scheduling-repeating-local-notifications-using-alarm-manager.html" rel="alternate"></link><published>2017-04-18T15:33:00-06:00</published><updated>2017-04-18T15:33:00-06:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2017-04-18:scheduling-repeating-local-notifications-using-alarm-manager.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This tutorial is a quick start guide to get you started with
Local Notifications in Android.&lt;/p&gt;
&lt;h3&gt;Scheduling Repeating Local Notifications using Alarm Manager&lt;/h3&gt;
&lt;p&gt;I'll be using Alarm Manager to schedule repeating local notifications in this sample app.
This sample app will send a local notification every morning at 8am.
I'm covering the use case that app is either in background or killed at the time when notification is received.
When user clicks on the notification, it takes user to app's main activity.&lt;/p&gt;
&lt;h4&gt;Give user option to enable/disable notifications&lt;/h4&gt;
&lt;p&gt;It's very important to give user option to opt-out or opt-in for local notifications.
You may want to do this in Settings Activity. When user has opted-in for local notifications,
then AlarmManager starts sending local notifications to user every morning. Time to send notifications
can be configured or just be default. I'll be using a default of 8am in this demo.&lt;/p&gt;
&lt;h3&gt;Components&lt;/h3&gt;
&lt;h4&gt;Scheduling notifications using Alarm Manager&lt;/h4&gt;
&lt;p&gt;There're two types of Alarms can be scheduled:
- Wall clock time
- Elapsed time (since device is booted).
Read more about them &lt;a href="https://developer.android.com/training/scheduling/alarms.html#set"&gt;here&lt;/a&gt;
I'll be scheduling notifications using both kind of alarms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Scheduling RTC&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * This is the real time /wall clock time&lt;/span&gt;
&lt;span class="cm"&gt; * @param context&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
public&lt;span class="w"&gt; &lt;/span&gt;static&lt;span class="w"&gt; &lt;/span&gt;void&lt;span class="w"&gt; &lt;/span&gt;scheduleRepeatingRTCNotification&lt;span class="o"&gt;(&lt;/span&gt;Context&lt;span class="w"&gt; &lt;/span&gt;context&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;String&lt;span class="w"&gt; &lt;/span&gt;hour&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;String&lt;span class="w"&gt; &lt;/span&gt;min&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;get&lt;span class="w"&gt; &lt;/span&gt;calendar&lt;span class="w"&gt; &lt;/span&gt;instance&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;able&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;what&lt;span class="w"&gt; &lt;/span&gt;time&lt;span class="w"&gt; &lt;/span&gt;notification&lt;span class="w"&gt; &lt;/span&gt;should&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;scheduled&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;Calendar&lt;span class="w"&gt; &lt;/span&gt;calendar&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Calendar&lt;span class="o"&gt;.&lt;/span&gt;getInstance&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;calendar&lt;span class="o"&gt;.&lt;/span&gt;setTimeInMillis&lt;span class="o"&gt;(&lt;/span&gt;System&lt;span class="o"&gt;.&lt;/span&gt;currentTimeMillis&lt;span class="o"&gt;())&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;Setting&lt;span class="w"&gt; &lt;/span&gt;time&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;day&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;am&lt;span class="w"&gt; &lt;/span&gt;here&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;when&lt;span class="w"&gt; &lt;/span&gt;notification&lt;span class="w"&gt; &lt;/span&gt;will&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;sent&lt;span class="w"&gt; &lt;/span&gt;every&lt;span class="w"&gt; &lt;/span&gt;day&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;default&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;calendar&lt;span class="o"&gt;.&lt;/span&gt;set&lt;span class="o"&gt;(&lt;/span&gt;Calendar&lt;span class="o"&gt;.&lt;/span&gt;HOUR_OF_DAY&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;Integer&lt;span class="o"&gt;.&lt;/span&gt;getInteger&lt;span class="o"&gt;(&lt;/span&gt;hour&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;Integer&lt;span class="o"&gt;.&lt;/span&gt;getInteger&lt;span class="o"&gt;(&lt;/span&gt;min&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;Setting&lt;span class="w"&gt; &lt;/span&gt;intent&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;class&lt;span class="w"&gt; &lt;/span&gt;where&lt;span class="w"&gt; &lt;/span&gt;Alarm&lt;span class="w"&gt; &lt;/span&gt;broadcast&lt;span class="w"&gt; &lt;/span&gt;message&lt;span class="w"&gt; &lt;/span&gt;will&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;handled&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;Intent&lt;span class="w"&gt; &lt;/span&gt;intent&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;new&lt;span class="w"&gt; &lt;/span&gt;Intent&lt;span class="o"&gt;(&lt;/span&gt;context&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;AlarmReceiver&lt;span class="o"&gt;.&lt;/span&gt;class&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;Setting&lt;span class="w"&gt; &lt;/span&gt;alarm&lt;span class="w"&gt; &lt;/span&gt;pending&lt;span class="w"&gt; &lt;/span&gt;intent&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;alarmIntentRTC&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PendingIntent&lt;span class="o"&gt;.&lt;/span&gt;getBroadcast&lt;span class="o"&gt;(&lt;/span&gt;context&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ALARM_TYPE_RTC&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;intent&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PendingIntent&lt;span class="o"&gt;.&lt;/span&gt;FLAG_UPDATE_CURRENT&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;getting&lt;span class="w"&gt; &lt;/span&gt;instance&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;AlarmManager&lt;span class="w"&gt; &lt;/span&gt;service&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;alarmManagerRTC&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;AlarmManager&lt;span class="o"&gt;)&lt;/span&gt;context&lt;span class="o"&gt;.&lt;/span&gt;getSystemService&lt;span class="o"&gt;(&lt;/span&gt;ALARM_SERVICE&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;Setting&lt;span class="w"&gt; &lt;/span&gt;alarm&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;wake&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="w"&gt; &lt;/span&gt;device&lt;span class="w"&gt; &lt;/span&gt;every&lt;span class="w"&gt; &lt;/span&gt;day&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;clock&lt;span class="w"&gt; &lt;/span&gt;time&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;AlarmManager&lt;span class="o"&gt;.&lt;/span&gt;RTC_WAKEUP&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;responsible&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;wake&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="w"&gt; &lt;/span&gt;device&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;sure&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;which&lt;span class="w"&gt; &lt;/span&gt;may&lt;span class="w"&gt; &lt;/span&gt;not&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;good&lt;span class="w"&gt; &lt;/span&gt;practice&lt;span class="w"&gt; &lt;/span&gt;all&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;time&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Use&lt;span class="w"&gt; &lt;/span&gt;this&lt;span class="w"&gt; &lt;/span&gt;when&lt;span class="w"&gt; &lt;/span&gt;you&lt;span class="w"&gt; &lt;/span&gt;know&lt;span class="w"&gt; &lt;/span&gt;what&lt;span class="w"&gt; &lt;/span&gt;you&lt;span class="s"&gt;&amp;#39;re doing.&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;Use&lt;span class="w"&gt; &lt;/span&gt;RTC&lt;span class="w"&gt; &lt;/span&gt;when&lt;span class="w"&gt; &lt;/span&gt;you&lt;span class="w"&gt; &lt;/span&gt;don&lt;span class="s"&gt;&amp;#39;t need to wake up device, but want to deliver the notification whenever device is woke-up&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;We&lt;span class="s"&gt;&amp;#39;ll be using RTC.WAKEUP for demo purpose only&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;alarmManagerRTC&lt;span class="o"&gt;.&lt;/span&gt;setInexactRepeating&lt;span class="o"&gt;(&lt;/span&gt;AlarmManager&lt;span class="o"&gt;.&lt;/span&gt;RTC_WAKEUP&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;calendar&lt;span class="o"&gt;.&lt;/span&gt;getTimeInMillis&lt;span class="o"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;AlarmManager&lt;span class="o"&gt;.&lt;/span&gt;INTERVAL_DAY&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;alarmIntentRTC&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;Scheduling Elapsed&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/***&lt;/span&gt;
&lt;span class="cm"&gt; * This is another way to schedule notifications using the elapsed time.&lt;/span&gt;
&lt;span class="cm"&gt; * Its based on the relative time since device was booted up.&lt;/span&gt;
&lt;span class="cm"&gt; * @param context&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
public&lt;span class="w"&gt; &lt;/span&gt;static&lt;span class="w"&gt; &lt;/span&gt;void&lt;span class="w"&gt; &lt;/span&gt;scheduleRepeatingElapsedNotification&lt;span class="o"&gt;(&lt;/span&gt;Context&lt;span class="w"&gt; &lt;/span&gt;context&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;Setting&lt;span class="w"&gt; &lt;/span&gt;intent&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;class&lt;span class="w"&gt; &lt;/span&gt;where&lt;span class="w"&gt; &lt;/span&gt;notification&lt;span class="w"&gt; &lt;/span&gt;will&lt;span class="w"&gt; &lt;/span&gt;be&lt;span class="w"&gt; &lt;/span&gt;handled&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;Intent&lt;span class="w"&gt; &lt;/span&gt;intent&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;new&lt;span class="w"&gt; &lt;/span&gt;Intent&lt;span class="o"&gt;(&lt;/span&gt;context&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;AlarmReceiver&lt;span class="o"&gt;.&lt;/span&gt;class&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;Setting&lt;span class="w"&gt; &lt;/span&gt;pending&lt;span class="w"&gt; &lt;/span&gt;intent&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;respond&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;broadcast&lt;span class="w"&gt; &lt;/span&gt;sent&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kr"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;AlarmManager&lt;span class="w"&gt; &lt;/span&gt;everyday&lt;span class="w"&gt; &lt;/span&gt;at&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;am&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;alarmIntentElapsed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PendingIntent&lt;span class="o"&gt;.&lt;/span&gt;getBroadcast&lt;span class="o"&gt;(&lt;/span&gt;context&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;ALARM_TYPE_ELAPSED&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;intent&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PendingIntent&lt;span class="o"&gt;.&lt;/span&gt;FLAG_UPDATE_CURRENT&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;getting&lt;span class="w"&gt; &lt;/span&gt;instance&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;AlarmManager&lt;span class="w"&gt; &lt;/span&gt;service&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;alarmManagerElapsed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;AlarmManager&lt;span class="o"&gt;)&lt;/span&gt;context&lt;span class="o"&gt;.&lt;/span&gt;getSystemService&lt;span class="o"&gt;(&lt;/span&gt;ALARM_SERVICE&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;Inexact&lt;span class="w"&gt; &lt;/span&gt;alarm&lt;span class="w"&gt; &lt;/span&gt;everyday&lt;span class="w"&gt; &lt;/span&gt;since&lt;span class="w"&gt; &lt;/span&gt;device&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;booted&lt;span class="w"&gt; &lt;/span&gt;up&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;This&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;a&lt;span class="w"&gt; &lt;/span&gt;better&lt;span class="w"&gt; &lt;/span&gt;choice&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;scales&lt;span class="w"&gt; &lt;/span&gt;well&lt;span class="w"&gt; &lt;/span&gt;when&lt;span class="w"&gt; &lt;/span&gt;device&lt;span class="w"&gt; &lt;/span&gt;time&lt;span class="w"&gt; &lt;/span&gt;settings&lt;span class="o"&gt;/&lt;/span&gt;locale&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;changed&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;We&lt;span class="s"&gt;&amp;#39;re setting alarm to fire notification after 15 minutes, and every 15 minutes there on&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;alarmManagerElapsed&lt;span class="o"&gt;.&lt;/span&gt;setInexactRepeating&lt;span class="o"&gt;(&lt;/span&gt;AlarmManager&lt;span class="o"&gt;.&lt;/span&gt;ELAPSED_REALTIME&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;SystemClock&lt;span class="o"&gt;.&lt;/span&gt;elapsedRealtime&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;AlarmManager&lt;span class="o"&gt;.&lt;/span&gt;INTERVAL_FIFTEEN_MINUTES&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;AlarmManager&lt;span class="o"&gt;.&lt;/span&gt;INTERVAL_FIFTEEN_MINUTES&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;alarmIntentElapsed&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;AlarmReceiver (BroadcastReceiver)&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;AlarmReceiver&lt;/code&gt; class extends &lt;code&gt;BroadcastReceiver&lt;/code&gt;. This handles the AlarmManager's broadcast
 about sending local notifications at a given time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; public class AlarmReceiver extends BroadcastReceiver {
     @Override
     public void onReceive(Context context, Intent intent) {
         //Intent to invoke app when click on notification.
         //In this sample, we want to start/launch this sample app when user clicks on notification
         Intent intentToRepeat = new Intent(context, MainActivity.class);
         //set flag to restart/relaunch the app
         intentToRepeat.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);

         //Pending intent to handle launch of Activity in intent above
         PendingIntent pendingIntent =
                 PendingIntent.getActivity(context, NotificationHelper.ALARM_TYPE_RTC, intentToRepeat, PendingIntent.FLAG_UPDATE_CURRENT);

         //Build notification
         Notification repeatedNotification = buildLocalNotification(context, pendingIntent).build();

         //Send local notification
         NotificationHelper.getNotificationManager(context).notify(NotificationHelper.ALARM_TYPE_RTC, repeatedNotification);
     }

     public NotificationCompat.Builder buildLocalNotification(Context context, PendingIntent pendingIntent) {
         NotificationCompat.Builder builder =
                 (NotificationCompat.Builder) new NotificationCompat.Builder(context)
                 .setContentIntent(pendingIntent)
                 .setSmallIcon(android.R.drawable.arrow_up_float)
                 .setContentTitle(&amp;quot;Morning Notification&amp;quot;)
                 .setAutoCancel(true);

         return builder;
     }
 }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; Don't forget to add &lt;code&gt;&amp;lt;receiver&amp;gt;&lt;/code&gt; tag in &lt;code&gt;AndroidManifest.xml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;receiver android:name=&amp;quot;.notification.AlarmReceiver&amp;quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;NotificationHelper&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://github.com/ptyagicodecamp/RepeatingLocalNotifications/blob/master/app/src/main/java/org/pcc/repeatinglocalnotifications/notification/NotificationHelper.java"&gt;Convenience helper class&lt;/a&gt; to generate notification&lt;/p&gt;
&lt;h4&gt;Don't loose your notifications settings across device boots&lt;/h4&gt;
&lt;p&gt;Alarms will be cancelled when a device re-boots, so your notification settings.
In order to persist your notifications setting or alarms across device reboots,
you would need to reset alarm when a device boots up.&lt;/p&gt;
&lt;h5&gt;AndroidManifest.xml configuration&lt;/h5&gt;
&lt;p&gt;Add this permission in &lt;code&gt;AndroidManifest.xml&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.permission.RECEIVE_BOOT_COMPLETED&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;application&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;receiver&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.notification.AlarmBootReceiver&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:enabled=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;action&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.intent.action.BOOT_COMPLETED&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/action&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/receiver&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Implementing Boot Receiver&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;AlarmBootReceiver&lt;/code&gt; will look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class AlarmBootReceiver extends BroadcastReceiver {
    @Override
    public void onReceive(Context context, Intent intent) {
        if (intent.getAction().equals(&amp;quot;android.intent.action.BOOT_COMPLETED&amp;quot;)) {
            //only enabling one type of notifications for demo purposes
            NotificationHelper.scheduleRepeatingElapsedNotification(context);
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enable boot receiver when Alarm is set. It means if user opts-into notifications, then
enable boot receiver as part of enabling notification code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ComponentName receiver = new ComponentName(context, AlarmBootReceiver.class);
PackageManager pm = context.getPackageManager();

pm.setComponentEnabledSetting(receiver,
        PackageManager.COMPONENT_ENABLED_STATE_ENABLED,
        PackageManager.DONT_KILL_APP);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When user opts-out from notifications, you can cancel alarm and also disable boot receiver like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ComponentName receiver = new ComponentName(context, AlarmBootReceiver.class);
PackageManager pm = context.getPackageManager();

pm.setComponentEnabledSetting(receiver,
        PackageManager.COMPONENT_ENABLED_STATE_DISABLED,
        PackageManager.DONT_KILL_APP);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it !&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;References:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Source Code is available &lt;a href="https://github.com/ptyagicodecamp/RepeatingLocalNotifications"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More details you can find &lt;a href="https://developer.android.com/training/scheduling/alarms.html"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><category term="Android"></category><category term="Notifications"></category><category term="AlarmManager"></category></entry><entry><title>Android Studio Tips &amp; Tricks Series</title><link href="http://ptyagicodecamp.github.io/android-studio-tips-tricks-series.html" rel="alternate"></link><published>2017-04-13T13:06:00-06:00</published><updated>2017-04-13T13:06:00-06:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2017-04-13:android-studio-tips-tricks-series.html</id><summary type="html">&lt;h2&gt;Tips And Tricks&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="./how-to-get-sha1-fingerprint-for-digitally-signed-apk.html"&gt;How to get SHA1 fingerprint for digitally signed APK&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</summary><category term="Android"></category><category term="Android Studio"></category><category term="Tips &amp; Tricks"></category></entry><entry><title>How to get SHA1 fingerprint for digitally signed APK</title><link href="http://ptyagicodecamp.github.io/how-to-get-sha1-fingerprint-for-digitally-signed-apk.html" rel="alternate"></link><published>2017-04-13T13:06:00-06:00</published><updated>2017-04-13T13:06:00-06:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2017-04-13:how-to-get-sha1-fingerprint-for-digitally-signed-apk.html</id><summary type="html">&lt;h2&gt;How to get SHA1 fingerprint for digitally signed APK&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Open terminal in Android Studio&lt;/li&gt;
&lt;li&gt;Run Keytool utility to get SHA1 for your APK:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;keytool -exportcert -alias &amp;lt;your_alias&amp;gt; -keystore &amp;lt;path-to-keystore&amp;gt; -list -v
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Android"></category><category term="Android Studio"></category><category term="Tips &amp; Tricks"></category></entry><entry><title>Accessing Pictures using FileProvider</title><link href="http://ptyagicodecamp.github.io/accessing-pictures-using-fileprovider.html" rel="alternate"></link><published>2017-04-13T12:02:00-06:00</published><updated>2017-04-13T12:02:00-06:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2017-04-13:accessing-pictures-using-fileprovider.html</id><summary type="html">&lt;h1&gt;Accessing Pictures using FileProvider&lt;/h1&gt;
&lt;p&gt;FileProvider is the backbone which helps in secure sharing of files across file-system on Android device.&lt;/p&gt;
&lt;p&gt;I’m using example of taking picture using camera on Android device to understand how FileProvider works. This Project demos does two things:
&lt;br&gt;
1. Takes Picture: &lt;a href="https://github.com/ptyagicodecamp/ptyagicodecamp.github.io/tree/master/images/fileprovider/s1.png"&gt;FAB to take picture&lt;/a&gt;
&lt;br&gt;
2. Displays picture taken: &lt;a href="https://github.com/ptyagicodecamp/ptyagicodecamp.github.io/tree/master/images/fileprovider/s2.png"&gt;Displaying recent picture&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Scenario&lt;/h4&gt;
&lt;p&gt;User Clicks FAB to take picture. Picture got displayed in ImageView.
we want to know what went behind the scenes from clicking the FAB to displaying a picture.
How/where the image file got created ? What made it available to Camera Intent ?
Yes, you guessed it ! FileProvider made newly created blank image file available to Camera Intent to store pixels/binary data of new pictures in it.&lt;/p&gt;
&lt;h4&gt;Internals&lt;/h4&gt;
&lt;p&gt;What happens when user clicks on FAB to initiate taking picture ?
First of all a temporary file get created under picture directory for app. The storage location
will be something like this: &lt;code&gt;/storage/emulated/0/Android/data/org.pcc.fileprovider/files/Pictures&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This file is queried using &lt;a href="https://developer.android.com/reference/android/support/v4/content/FileProvider.html"&gt;FileProvider&lt;/a&gt;
and passed to the camera intent.&lt;/p&gt;
&lt;p&gt;Code to query recently created image file in internal picture directory for app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
Uri imgUri = FileProvider.getUriForFile(this,
                    &amp;quot;org.pcc.fileprovider&amp;quot;, imageFile.getFile());
takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, imgUri);
startActivityForResult(takePictureIntent, REQUEST_CODE_IMAGE_CAPTURE);
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Configuring FileProvider in Android Studio Project&lt;/h4&gt;
&lt;p&gt;It's a two step process. First you've to declare &lt;code&gt;&amp;lt;provider&amp;gt;&lt;/code&gt; tag in your app's
&lt;code&gt;AndroidManifest.xml&lt;/code&gt;. Second, you will need to create &lt;code&gt;file_paths.xml&lt;/code&gt; inside &lt;code&gt;res/xml&lt;/code&gt; folder.&lt;/p&gt;
&lt;h5&gt;AndroidManifest.xml&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;provider&amp;gt;&lt;/code&gt; tag has to be declared inside &lt;code&gt;&amp;lt;application&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;application&lt;/span&gt;
        &lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;provider&lt;/span&gt;
            &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.support.v4.content.FileProvider&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:authorities=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;org.pcc.fileprovider&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:exported=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;
            &lt;span class="na"&gt;android:grantUriPermissions=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;meta-data&lt;/span&gt;
                &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.support.FILE_PROVIDER_PATHS&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;android:resource=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@xml/file_paths&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/provider&amp;gt;&lt;/span&gt;
       ....
&lt;span class="nt"&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;        
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;file_paths.xml&lt;/h5&gt;
&lt;p&gt;Create a file &lt;code&gt;file_paths.xml&lt;/code&gt; inside &lt;code&gt;res/xml&lt;/code&gt; folder of your app. This file
will have these contents in it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;paths&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;external-path&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;my_images&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;path=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Android/data/org.pcc.fileprovider/files/Pictures&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/paths&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's it !&lt;/p&gt;
&lt;p&gt;Checkout &lt;a href="https://github.com/ptyagicodecamp/android-recipes/tree/develop/FileProvider"&gt;source code&lt;/a&gt; in github to see &lt;code&gt;FileProviderDemo&lt;/code&gt; in action.&lt;/p&gt;</summary><category term="Android"></category><category term="FileProvider"></category></entry><entry><title>Automating Android App publishing to Play Store using Jenkins</title><link href="http://ptyagicodecamp.github.io/automating-android-app-publishing-to-play-store-using-jenkins.html" rel="alternate"></link><published>2017-02-23T12:02:00-07:00</published><updated>2017-02-23T12:02:00-07:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2017-02-23:automating-android-app-publishing-to-play-store-using-jenkins.html</id><summary type="html">&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;This article describes the journey I took from setting up Jenkins to automate publishing Android APKs to Google Play Publishing portal and useful notes that I collected along the way. I set up Jenkins-2.46 on Mac OSX 10.12.3.&lt;/p&gt;
&lt;h4&gt;Download Package&lt;/h4&gt;
&lt;p&gt;You can download “.pkg” file from &lt;a href="http://mirrors.jenkins.io/osx/latest"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Complete Installation&lt;/h4&gt;
&lt;p&gt;Follow the instructions to complete installation.
&lt;img alt="Alt installation" src="../images/jenkins/installation.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You’ll be asked to enter an additional password like below to ensure the security:
&lt;br&gt;
&lt;img alt="Alt installation2" src="../images/jenkins/installation-2.png" /&gt;&lt;/p&gt;
&lt;h4&gt;Choosing Plugins&lt;/h4&gt;
&lt;p&gt;You can go with default plugins unless you know what plugins you want to install. I'll cover other plugins, if needed as their need arises.&lt;/p&gt;
&lt;h4&gt;Starting Jenkins&lt;/h4&gt;
&lt;p&gt;Once installation is complete, you can type  &lt;a href="http://localhost:8080"&gt;http://localhost:8080&lt;/a&gt; in your browser to start jenkins server. It’ll ask for temporary password it created at : /Users/Shared/Jenkins/Home/secrets/initialAdminPassword&lt;/p&gt;
&lt;p&gt;This is how it will look like:
&lt;img alt="Alt starting" src="../images/jenkins/starting.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Unless you’ve created an admin user explicitly, you can login as administrator using username &lt;strong&gt;“admin”&lt;/strong&gt; and password created in &lt;strong&gt;“/Users/Shared/Jenkins/Home/secrets/initialAdminPassword”&lt;/strong&gt; file.&lt;/p&gt;
&lt;p&gt;Click on “Start Jenkins” to start creating jobs on Jenkins to automate project building and publishing.&lt;/p&gt;
&lt;h3&gt;Setting up Job to Build Android project&lt;/h3&gt;
&lt;h4&gt;&lt;strong&gt;Create Jenkins Job&lt;/strong&gt;&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a free-style project.
&lt;img alt="Alt free-style" src="../images/jenkins/project-1.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add Repository in &lt;strong&gt;Source Code Management&lt;/strong&gt; section. You will have to provide credentials to Jenkins to access source code repository.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add build specific configuration in &lt;strong&gt;Build&lt;/strong&gt; section. I'll be using shell script to build my gradle based project.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you're running into source code repo access issues, then you may want to add credentials like this:
&lt;img alt="Alt repo-creds" src="../images/jenkins/repo-creds.png" /&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Uploading APK to Play Store&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Setup&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You'll need &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Google+Play+Android+Publisher+Plugin"&gt;Google Play Android Publisher Plugin&lt;/a&gt; plugin to publish APKs automatically from Jenkins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Navigate to localhost:8080 in your browser to get to Jenkins. Click on &lt;strong&gt;Manage Jenkins&lt;/strong&gt; --&amp;gt; &lt;strong&gt;Manage Plugins&lt;/strong&gt;. Look for 'Google Play Android Publisher Plugin' by typing it in search box and install. You'll need to add service account to Jenkins as well. Refer to &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Google+Play+Android+Publisher+Plugin"&gt;link for detailed process&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You'll need to enable API access from Jenkins. So, you have to be owner of your &lt;a href="https://developer.android.com/distribute/googleplay/start.html"&gt;Google Play Publisher account&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Its important to know that you must have pre-existing app in Play Store already before you could upload another incremental update via Jenkins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create Service account at Play Store publishing portal under 'API Access' category at left. It'll take you to Google project console. This is where, you'll create 'JSON' or 'p12' key to enable integration between Jenkins and Play Store publishing. Keep this key safe since you'll need this to enable Jenkins account to access Play store publishing. Also, Don't forget to grant 'Release Manager' permissions to this service account in Play store Publishing portal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Go back to Jenkins, and create credentials to access Play Store. This is where you'll need to provide JSON key that you created in step above.
&lt;img alt="Alt credentials" src="../images/jenkins/playstore-service-creds.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Google+Play+Android+Publisher+Plugin"&gt;Here&lt;/a&gt; is pretty good explanation of process to setup your accounts.&lt;/p&gt;
&lt;p&gt;Note 1: You can use following command on terminal to reset &lt;code&gt;jenkins&lt;/code&gt; user password, if run into password related issues:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo passwd jenkins
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note 2: Jenkins will need its own installation of Android sdk. Don't forget to make sure that sdk installation has &lt;code&gt;license&lt;/code&gt; directory. If its not available, then copy it from you other sdk instaltion to here at first level. Check &lt;a href="https://developer.android.com/studio/intro/update.html#download-with-gradle"&gt;this link&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Configuring Job&lt;/strong&gt;
1. Add post-build action: "Upload Android APK to Google Play"
&lt;img alt="Alt upload-apk-1" src="../images/jenkins/upload-apk-1.png" /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fill-in the path or pattern to APK created locally. In my case, its &lt;code&gt;**/*-release.apk&lt;/code&gt;. Also, add languages supprted and add roll-out percentage if its being pushed in production channel. I'm publishing to &lt;code&gt;alpha&lt;/code&gt; channel.
&lt;img alt="Alt upload-apk-2" src="../images/jenkins/upload-apk-2.png" /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And you're done !&lt;/p&gt;
&lt;p&gt;For more details about configuring uploading job refer to &lt;a href="https://wiki.jenkins-ci.org/display/JENKINS/Google+Play+Android+Publisher+Plugin"&gt;this link&lt;/a&gt;.&lt;/p&gt;</summary><category term="Android"></category><category term="Jenkins"></category><category term="DevOps"></category></entry><entry><title>Creating Sub MenuItems for FAB (Floating Action Button)</title><link href="http://ptyagicodecamp.github.io/creating-sub-menuitems-for-fab-floating-action-button.html" rel="alternate"></link><published>2017-02-15T11:24:00-07:00</published><updated>2017-02-15T11:24:00-07:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2017-02-15:creating-sub-menuitems-for-fab-floating-action-button.html</id><summary type="html">&lt;h3&gt;Final Outcome&lt;/h3&gt;
&lt;p&gt;Our target to integrate FAB into an existing Android App and creating submenus. Settings icon is used as FAB. Clicking on it will open its submenus: Save, Edit and Photo. Clicking on X will close submenus and Settings icon will re-appear.&lt;/p&gt;
&lt;p&gt;This is how main screen will look after FAB integrated into it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/device-settings-close.png" /&gt;&lt;/p&gt;
&lt;p&gt;Clicking on &lt;code&gt;Settings&lt;/code&gt; icon will open sub menus:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/device-settings-open.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Create Android Studio Project&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Step#1:&lt;/em&gt;&lt;/strong&gt; Create New Project in Android Studio:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/create_project-1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Step#2:&lt;/em&gt;&lt;/strong&gt; Choose Blank Activity:
&lt;img alt="" src="./images/create_project-2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Step#3:&lt;/em&gt;&lt;/strong&gt; This how your project would look like :
&lt;img alt="" src="./images/create_project-3.png" /&gt;&lt;/p&gt;
&lt;h3&gt;Preparation&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Step#1:&lt;/em&gt;&lt;/strong&gt;  Assets:
I need few assets to be used as FAB submenu icons.
I used Android Studio’s built-in tool to generate Vector Assets.
You can access this tool right clicking on &lt;code&gt;app&lt;/code&gt; module → Click &lt;code&gt;New&lt;/code&gt; → Click on &lt;code&gt;Vector Assets&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/create-vector-asset-1.png" /&gt;
&lt;img alt="" src="./images/create-vector-asset-2.png" /&gt;
&lt;img alt="" src="./images/create-vector-asset-3.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Step#2:&lt;/em&gt;&lt;/strong&gt;  Configuration:
I’ll be using cardView component to display description for sub menu items.
Here’s how you can add it as a dependency in your &lt;code&gt;build.gradle&lt;/code&gt;:
&lt;code&gt;compile 'com.android.support:cardview-v7:25.1.0'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/cardview-dep-gradle.png" /&gt;&lt;/p&gt;
&lt;h4&gt;XML Layout&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Step#1:&lt;/em&gt;&lt;/strong&gt; Create a new layout file to contains FAB and its sub menu items.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/create-submenu-layout-1.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="./images/create-submenu-layout-2.png" /&gt;&lt;/p&gt;
&lt;p&gt;I named it as &lt;code&gt;layout_fab_submenu.xml&lt;/code&gt;. It’s a &lt;code&gt;FrameLayout&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I chose FrameLayout because I wanted a screen floating atop of existing screen and
a holder for all FAB menu items. Don’t forget to set the top margin to &lt;code&gt;android:layout_marginTop="?attr/actionBarSize"&lt;/code&gt; to avoid Actionbar overlapping.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;FrameLayout&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:app=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res-auto&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@+id/fabFrame&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;match_parent&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_marginTop=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;?attr/actionBarSize&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:paddingBottom=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@dimen/activity_vertical_margin&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:paddingLeft=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@dimen/activity_horizontal_margin&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:paddingRight=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@dimen/activity_horizontal_margin&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:paddingTop=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@dimen/activity_vertical_margin&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;android:orientation=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;vertical&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    .....
&lt;span class="nt"&gt;&amp;lt;/FrameLayout&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;Step#2:&lt;/em&gt;&lt;/strong&gt; Layout for FAB SubMenu items&lt;/p&gt;
&lt;p&gt;Now, I want to create one &lt;code&gt;LinearLayout&lt;/code&gt; for each &lt;strong&gt;&lt;em&gt;FAB&lt;/em&gt;&lt;/strong&gt;. Since I want all of the FAB items
to be at bottom right corner of screen, so I will use &lt;code&gt;android:layout_gravity=bottom|end&lt;/code&gt;.
Every sub menu will have its own &lt;code&gt;LinearLayout&lt;/code&gt; like following. Each &lt;code&gt;LinearLayout&lt;/code&gt; has one &lt;code&gt;CardView&lt;/code&gt;
to hold &lt;code&gt;TextView&lt;/code&gt; for explaining FAB's purpose and one &lt;code&gt;android.support.design.widget.FloatingActionButton&lt;/code&gt; next to it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;LinearLayout
        android:id=&amp;quot;@+id/layoutFabSave&amp;quot;
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:gravity=&amp;quot;center_vertical&amp;quot;
        android:layout_gravity=&amp;quot;bottom|end&amp;quot;
        android:layout_marginRight=&amp;quot;8dp&amp;quot;
        android:layout_marginBottom=&amp;quot;120dp&amp;quot;
        android:layout_marginEnd=&amp;quot;8dp&amp;quot;
        android:orientation=&amp;quot;horizontal&amp;quot;&amp;gt;

        &amp;lt;android.support.v7.widget.CardView
            android:layout_width=&amp;quot;wrap_content&amp;quot;
            android:layout_height=&amp;quot;wrap_content&amp;quot;
            app:cardBackgroundColor=&amp;quot;@color/cardview_light_background&amp;quot;
            app:cardCornerRadius=&amp;quot;@dimen/cardCornerRadius&amp;quot;
            app:cardElevation=&amp;quot;@dimen/cardElevation&amp;quot;
            app:cardUseCompatPadding=&amp;quot;true&amp;quot; &amp;gt;
            &amp;lt;TextView
                android:id=&amp;quot;@+id/cvtSave&amp;quot;
                android:layout_width=&amp;quot;wrap_content&amp;quot;
                android:layout_height=&amp;quot;wrap_content&amp;quot;
                android:text=&amp;quot;@string/save&amp;quot;
                android:textAppearance=&amp;quot;?android:attr/textAppearanceSmall&amp;quot;
                android:textStyle=&amp;quot;bold&amp;quot;
                android:paddingRight=&amp;quot;@dimen/cardview_horizontal_padding&amp;quot;
                android:paddingLeft=&amp;quot;@dimen/cardview_horizontal_padding&amp;quot;
                android:paddingBottom=&amp;quot;@dimen/cardview_vertical_padding&amp;quot;
                android:paddingTop=&amp;quot;@dimen/cardview_vertical_padding&amp;quot; /&amp;gt;
        &amp;lt;/android.support.v7.widget.CardView&amp;gt;

        &amp;lt;android.support.design.widget.FloatingActionButton
            android:id=&amp;quot;@+id/fabSave&amp;quot;
            android:layout_width=&amp;quot;wrap_content&amp;quot;
            android:layout_height=&amp;quot;wrap_content&amp;quot;
            android:src=&amp;quot;@drawable/ic_save_black_24dp&amp;quot;
            app:backgroundTint=&amp;quot;@android:color/holo_green_light&amp;quot;
            app:fabSize=&amp;quot;mini&amp;quot; /&amp;gt;

    &amp;lt;/LinearLayout&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Lets check out More Code&lt;/h3&gt;
&lt;p&gt;In order to support FAB opening and closing, you would need to write two methods. One is to make sub menus
visible, and other is to hide sub menus and only show main FAB which is &lt;code&gt;Settings&lt;/code&gt; icon is our case.
When &lt;code&gt;Settings&lt;/code&gt; FAB expands, it turns into 'X' to give option to be able to close expanded sub menus.
These are the two methods you would need:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//closes FAB submenus
    private void closeSubMenusFab(){
        layoutFabSave.setVisibility(View.INVISIBLE);
        layoutFabEdit.setVisibility(View.INVISIBLE);
        layoutFabPhoto.setVisibility(View.INVISIBLE);
        fabSettings.setImageResource(R.drawable.ic_settings_black_24dp);
        fabExpanded = false;
    }

    //Opens FAB submenus
    private void openSubMenusFab(){
        layoutFabSave.setVisibility(View.VISIBLE);
        layoutFabEdit.setVisibility(View.VISIBLE);
        layoutFabPhoto.setVisibility(View.VISIBLE);
        //Change settings icon to &amp;#39;X&amp;#39; icon
        fabSettings.setImageResource(R.drawable.ic_close_black_24dp);
        fabExpanded = true;
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, its time to hook them up in the main code to make it functional. Lets start with &lt;code&gt;onCreate()&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public class MainActivity extends AppCompatActivity {

    //boolean flag to know if main FAB is in open or closed state.
    private boolean fabExpanded = false;
    private FloatingActionButton fabSettings;

    //Linear layout holding the Save submenu
    private LinearLayout layoutFabSave;

    //Linear layout holding the Edit submenu
    private LinearLayout layoutFabEdit;
    private LinearLayout layoutFabPhoto;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        fabSettings = (FloatingActionButton) this.findViewById(R.id.fabSetting);

        layoutFabSave = (LinearLayout) this.findViewById(R.id.layoutFabSave);
        layoutFabEdit = (LinearLayout) this.findViewById(R.id.layoutFabEdit);
        layoutFabPhoto = (LinearLayout) this.findViewById(R.id.layoutFabPhoto);

        //When main Fab (Settings) is clicked, it expands if not expanded already.
        //Collapses if main FAB was open already.
        //This gives FAB (Settings) open/close behavior
        fabSettings.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (fabExpanded == true){
                    closeSubMenusFab();
                } else {
                    openSubMenusFab();
                }
            }
        });

        //Only main FAB is visible in the beginning
        closeSubMenusFab();
    }

    ....
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Congratulations!&lt;/h3&gt;
&lt;p&gt;Yay ! You got FAB integrated along with sub menu in less than 5 minutes. Its time to celebrate :)&lt;/p&gt;
&lt;p&gt;Source code is available at &lt;a href="https://github.com/ptyagicodecamp/fab-submenu"&gt;Github &lt;/a&gt;&lt;/p&gt;</summary><category term="ANDROID"></category><category term="FAB"></category><category term="DEV"></category><category term="UI"></category></entry><entry><title>Android WebViewOverlay Widget</title><link href="http://ptyagicodecamp.github.io/android-webviewoverlay-widget.html" rel="alternate"></link><published>2017-01-09T11:16:00-07:00</published><updated>2017-01-09T11:16:00-07:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2017-01-09:android-webviewoverlay-widget.html</id><summary type="html">&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;I needed a widget that can load a url in WebView in a full-screen closable overlay/modal.
I wanted to re-use this new, shiny widget in my other projects as well. So, I decided to upload
WebViewOverlay library in a central artifact repository. I chose JCenter because its one of the
largest artifact repository for Java and Android libraries and has good integration with Android Studio IDE.
If you're interested in learning how did I publish Android libary to JCenter,
then &lt;a href="https://ptyagicodecamp.github.io/how-did-i-publish-library-to-jcenter-from-android-studio.html"&gt;this post&lt;/a&gt;
will be helpful for you.&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This article describes how WebViewOverlay Widget can be integrated to your Android App in few minutes.
Integrating WebViewOverlay widget in your app is as simple as adding following line in your project's
&lt;code&gt;build.gradle&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;compile &amp;#39;org.ptyagicodecamp:WebViewOverlay:1.0.2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;WebViewOverlay Widget&lt;/h2&gt;
&lt;p&gt;WebViewOverlay widget loads a WebView widget in a full screen pop-up or modal. It has option to close it by
clicking on top-right corner 'x'&lt;/p&gt;
&lt;h2&gt;API&lt;/h2&gt;
&lt;p&gt;There're two APIs to load WebView either in full-screen mode or in a dialog with a custom title.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Full Screen Overlay&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;void loadWebViewOverlay(String urlToBeLoaded, HashMap&amp;lt;String, String&amp;gt; params);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Overlay FullScreen" src="http://ptyagicodecamp.github.io/OverlayFullScreen.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Full Screen Overlay With Custom Title&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;void loadWebViewOverlay(String urlToBeLoaded, HashMap&amp;lt;String, String&amp;gt; params, String popupTitle);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="OverlayWithTitle" src="http://ptyagicodecamp.github.io/OverlayWithTitle.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Integration&lt;/h2&gt;
&lt;p&gt;In Android Studio, it can be added to your project by adding following in &lt;code&gt;build.gradle&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;compile &amp;#39;org.ptyagicodecamp:WebViewOverlay:1.0.2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Initialization&lt;/h2&gt;
&lt;p&gt;WebViewOverlay widget can be initialized in Activity or BaseActivity's &lt;code&gt;onCreate()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;WebViewOverlay webViewOverlay;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    webViewOverlay = new WebViewOverlay(this);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;After initializing widget, it can simply be used by calling either of the API.
Here's examples to demonstrate both APIs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;public&lt;/span&gt; &lt;span class="nt"&gt;void&lt;/span&gt; &lt;span class="nt"&gt;openWebViewOverlay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;View&lt;/span&gt; &lt;span class="nt"&gt;view&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nb"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://ptyagicodecamp.github.io&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;webViewOverlay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loadWebViewOverlay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;public&lt;/span&gt; &lt;span class="nt"&gt;void&lt;/span&gt; &lt;span class="nt"&gt;openWebViewOverlayWithTitle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;View&lt;/span&gt; &lt;span class="nt"&gt;view&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nb"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://ptyagicodecamp.github.io&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;webViewOverlay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loadWebViewOverlay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;WebViewOverlay Demo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you're interested in checking out source code, then its available &lt;a href="https://github.com/ptyagicodecamp/webview-overlay"&gt;here at Github&lt;/a&gt;&lt;/p&gt;</summary><category term="Android"></category><category term="WebView"></category><category term="WebViewOverlay"></category><category term="Library"></category><category term="OpenSource"></category><category term="Dev"></category></entry><entry><title>How did I publish Android Library to JCenter from Android Studio</title><link href="http://ptyagicodecamp.github.io/how-did-i-publish-android-library-to-jcenter-from-android-studio.html" rel="alternate"></link><published>2017-01-07T17:27:00-07:00</published><updated>2017-01-07T17:27:00-07:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2017-01-07:how-did-i-publish-android-library-to-jcenter-from-android-studio.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;JCenter is a Maven Repository or file server hosted by &lt;a href="https://bintray.com/"&gt;Bintray&lt;/a&gt; for
Android libraries. It’s a default repository for Android Studio. To demonstrate the process of
publishing an OpenSource Android library, I'm using &lt;a href="https://ptyagicodecamp.github.io/webviewoverlay-widget-library.html"&gt;WebViewOverlay widget library&lt;/a&gt;
for example. After uploading to JCenter artifact repo, &lt;code&gt;WebViewOverlay&lt;/code&gt; widget can be dropped-in to your
project like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;compile &amp;#39;org.ptyagicodecamp:WebViewOverlay:1.0.2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Uploading Android library (in aar format) to Bintray&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create log-in at &lt;a href="https://bintray.com/"&gt;Bintray&lt;/a&gt;. Scroll down to register for an open-source project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a new repo:
  &lt;img alt="Create Repo" src="http://ptyagicodecamp.github.io/create_repo.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fill-in all required information and click "create repo". It'll redirect to "package" screen.
  &lt;img alt="Repo Created" src="http://ptyagicodecamp.github.io/repo_created.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on “Create Package”. Fill in your package name and click on "Add New Package":
&lt;img alt="Add New Package" src="http://ptyagicodecamp.github.io/add_new_package.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It'll take you to enter package details. Fill-in details and click on "Create Package" at the bottom.
&lt;img alt="Create Package" src="http://ptyagicodecamp.github.io/create_package.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And you’re Done with registering your Maven repository on Bintray !&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: Link your Github account from Bintray, if you want to upload library from &lt;code&gt;build.gradle&lt;/code&gt; (Android Studio).
You can do this by going into your repository on Bintray and selecting "Import from Github” option.
It’ll guide you through with rest of the steps.&lt;/p&gt;
&lt;h3&gt;Setting up Android Studio Project&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create a new project in Android Studio.&lt;/li&gt;
&lt;li&gt;Module &lt;code&gt;WebViewOverlay&lt;/code&gt; contains all the library code and module &lt;code&gt;app&lt;/code&gt; has sample app to demonstrate the usage of library.
Make sure that you name module same as of artifact name configured at Bintray. &lt;code&gt;WebViewOverlay&lt;/code&gt; in this example.
Refer to &lt;code&gt;WebViewOverlay&lt;/code&gt; at &lt;a href="https://github.com/ptyagicodecamp/webview-overlay"&gt;Github for source code&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Setup Android Studio project to be able to publish library to &lt;code&gt;jcenter()&lt;/code&gt; Maven repo, and
add Bintray plugin to project’s &lt;code&gt;build.gradle&lt;/code&gt;. Root level &lt;code&gt;build.gradle&lt;/code&gt; will look like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath &amp;#39;com.android.tools.build:gradle:2.2.3&amp;#39;
        classpath &amp;#39;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4&amp;#39;
        classpath &amp;#39;com.github.dcendents:android-maven-gradle-plugin:1.4.1&amp;#39;
    }
}

allprojects {
    repositories {
        jcenter()
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Update Bintray related credentials in &lt;code&gt;local.properties&lt;/code&gt; like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bintray.user=YOUR_BINTRAY_USERNAME
bintray.apikey=YOUR_BINTRAY_API_KEY
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: Look for &lt;strong&gt;API KEY&lt;/strong&gt; in your Profile section on Bintray.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add following in library module’s &lt;code&gt;build.gradle&lt;/code&gt;. In this case &lt;code&gt;build.gradle&lt;/code&gt; of &lt;code&gt;WebOverlay&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apply plugin: &amp;#39;com.android.library&amp;#39;

ext {
    bintrayRepo = &amp;#39;WebViewOverlay&amp;#39;
    bintrayName = &amp;#39;WebViewOverlay&amp;#39;

    publishedGroupId = &amp;#39;org.ptyagicodecamp&amp;#39;
    libraryName = &amp;#39;WebViewOverlay&amp;#39;
    artifact = &amp;#39;WebViewOverlay&amp;#39;

    libraryDescription = &amp;#39;A widget to load WebView as an Overlay.&amp;#39;

    siteUrl = &amp;#39;https://github.com/ptyagicodecamp/webview-overlay&amp;#39;
    gitUrl = &amp;#39;https://github.com/ptyagicodecamp/webview-overlay.git&amp;#39;

    libraryVersion = &amp;#39;1.0.0&amp;#39;

    developerId = &amp;#39;developerId&amp;#39;
    developerName = &amp;#39;Developer Name&amp;#39;
    developerEmail = &amp;#39;developer@email.com&amp;#39;

    licenseName = &amp;#39;The Apache Software License, Version 2.0&amp;#39;
    licenseUrl = &amp;#39;http://www.apache.org/licenses/LICENSE-2.0.txt&amp;#39;
    allLicenses = [&amp;quot;Apache-2.0&amp;quot;]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Refer to &lt;a href="https://github.com/ptyagicodecamp/webview-overlay/blob/master/WebViewOverlay/build.gradle"&gt;this &lt;code&gt;build.gradle&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You would need to add these scripts in order to publish libraries to Bintray:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//Add these lines to publish library to bintray. This is the readymade scripts made by github user nuuneoi to make uploading to bintray easy.
//Place it at the end of the file
apply from: &amp;#39;https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle&amp;#39;
apply from: &amp;#39;https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's all you ve to do in order to configure you Android Studio project.&lt;/p&gt;
&lt;h3&gt;Uploading to Bintray:&lt;/h3&gt;
&lt;p&gt;CD to Root of Android Studio Project, and run these commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gradlew install
gradlew bintrayUpload
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That’s it ! your artifact will be uploaded to Bintray.&lt;/p&gt;
&lt;h3&gt;Link to JCenter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Your package needs to be linked to JCenter to be able to be resolved.
&lt;img alt="Add to JCenter" src="http://ptyagicodecamp.github.io/add_to_jcenter.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It'll take couple of hours to get request approved. Once approved, you'll see you package like this:
&lt;img alt="Linked To JCenter" src="http://ptyagicodecamp.github.io/linked_to_jcenter.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: You will have to wait for couple of hours before it'll be synced on JCenter.
You can check if its available by going to "http://jcenter.bintray.com/&lt;path/to/package&gt;"&lt;/p&gt;
&lt;h3&gt;Start using your hosted library:&lt;/h3&gt;
&lt;p&gt;Now you can reference &lt;code&gt;WebViewOverlay&lt;/code&gt; library from your project's &lt;code&gt;build.gradle&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;compile &amp;#39;org.ptyagicodecamp:WebViewOverlay:1.0.0&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;References:&lt;/h3&gt;
&lt;p&gt;I followed &lt;a href="https://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en"&gt;this tutorial&lt;/a&gt; to get me setup at Bintray.&lt;/p&gt;</summary><category term="Bintray"></category><category term="Publishing"></category><category term="JCenter"></category><category term="Library"></category><category term="OpenSource"></category><category term="Dev"></category></entry><entry><title>Automatic Android APK Signing</title><link href="http://ptyagicodecamp.github.io/automatic-android-apk-signing.html" rel="alternate"></link><published>2016-12-20T12:51:00-07:00</published><updated>2016-12-20T12:51:00-07:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2016-12-20:automatic-android-apk-signing.html</id><summary type="html">&lt;h3&gt;Declaring Signing credentials&lt;/h3&gt;
&lt;p&gt;Never put your signing apk credentials in github or any public sharable place. Always put them in a non-committable file. I'll be using local gradle installations's &lt;code&gt;gradle.properties&lt;/code&gt; to store signing creds. It sits at root level of your project. Alternately, you can also use &lt;path-to-.gradle-dir&gt;/.gradle/.gradle.properties.&lt;/p&gt;
&lt;h4&gt;Declaring release apk credentials&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;RELEASE_KEYSTORE_FILE={path to your release keystore}
RELEASE_KEYSTORE_PASSWORD=*****
RELEASE_KEYSTORE_ALIAS=*****
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Declaring debug apk credentials&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DEBUG_KEYSTORE_FILE={path to your debug keystore}
DEBUG_KEYSTORE_PASSWORD=*****
DEBUG_KEYSTORE_ALIAS=*****
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: There is no quotes around file path, passwords and alias.&lt;/p&gt;
&lt;h3&gt;Loading variables from gradle.properties into build.gradle&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Properties properties = new Properties()
properties.load(project.rootProject.file(&amp;#39;gradle.properties&amp;#39;).newDataInputStream())
def RELEASE_KEYSTORE_FILE = properties.getProperty(&amp;#39;RELEASE_KEYSTORE_FILE&amp;#39;)
def RELEASE_KEYSTORE_PASSWORD = properties.getProperty(&amp;#39;RELEASE_KEYSTORE_PASSWORD&amp;#39;)
def RELEASE_KEYSTORE_ALIAS = properties.getProperty(&amp;#39;RELEASE_KEYSTORE_ALIAS&amp;#39;)

def DEBUG_KEYSTORE_FILE = properties.getProperty(&amp;#39;DEBUG_KEYSTORE_FILE&amp;#39;)
def DEBUG_KEYSTORE_PASSWORD = properties.getProperty(&amp;#39;DEBUG_KEYSTORE_PASSWORD&amp;#39;)
def DEBUG_KEYSTORE_ALIAS = properties.getProperty(&amp;#39;DEBUG_KEYSTORE_ALIAS&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Defining Signing config in &lt;code&gt;build.gradle&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;signingConfigs {
        debug {
            storeFile file(new File(DEBUG_KEYSTORE_FILE))
            storePassword DEBUG_KEYSTORE_PASSWORD
            keyAlias DEBUG_KEY_ALIAS
            keyPassword DEBUG_KEY_PASSWORD
        }

        release {
            storeFile file(new File(RELEASE_KEYSTORE_FILE))
            storePassword RELEASE_KEYSTORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: Order of defining &lt;code&gt;buildTypes&lt;/code&gt; block and &lt;code&gt;signingConfigs&lt;/code&gt; block is very important. &lt;code&gt;signingConfigs&lt;/code&gt; comes before &lt;code&gt;buildTypes&lt;/code&gt; block.&lt;/p&gt;
&lt;h3&gt;Putting All together&lt;/h3&gt;
&lt;p&gt;Full signing configuration in &lt;code&gt;build.gradle&lt;/code&gt; will look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apply plugin: &amp;#39;com.android.application&amp;#39;

android {
    compileSdkVersion 22
    buildToolsVersion &amp;quot;22.0.1&amp;quot;

    defaultConfig {
        applicationId &amp;quot;com.myawesomeproject.id&amp;quot;
        minSdkVersion 14
        targetSdkVersion 24
        versionCode 1
        versionName &amp;quot;1.1&amp;quot;
    }

    signingConfigs {
        debug {
            storeFile file(new File(DEBUG_KEYSTORE_FILE))
            storePassword DEBUG_KEYSTORE_PASSWORD
            keyAlias DEBUG_KEY_ALIAS
            keyPassword DEBUG_KEY_PASSWORD
        }

        release {
            storeFile file(new File(RELEASE_KEYSTORE_FILE))
            storePassword RELEASE_KEYSTORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile(&amp;#39;proguard-android.txt&amp;#39;), &amp;#39;proguard-rules.pro&amp;#39;
        }
    }
} //closing android block


dependencies {
    compile fileTree(dir: &amp;#39;libs&amp;#39;, include: [&amp;#39;*.jar&amp;#39;])
}
&lt;/pre&gt;&lt;/div&gt;</summary><category term="android"></category><category term="gradle"></category><category term="signing"></category><category term="apk"></category><category term="dev"></category></entry><entry><title>WebViewHelper library</title><link href="http://ptyagicodecamp.github.io/webviewhelper-library.html" rel="alternate"></link><published>2016-12-16T15:06:00-07:00</published><updated>2016-12-16T15:06:00-07:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2016-12-16:webviewhelper-library.html</id><summary type="html">&lt;h3&gt;A little about WebView widgets:&lt;/h3&gt;
&lt;p&gt;Webview widget is used to display HTML contents in an Android app. HTML contents can be rendered in a TextView widget using Html.fromHtml() method to parse very basic text. So why do we need WebView widget ? WebView widget is capable of handling more advanced HTML tags, Javascript and CSS, which gives a native feel to HTML contents right in your app. But this doesn't come for free. WebViews are more memory intensive when compared to TextView widget.&lt;/p&gt;
&lt;h3&gt;Background:&lt;/h3&gt;
&lt;p&gt;Pre Android 4.4, WebView was powered by WebKit. Starting Android 4.4, it’s powered by Chromium. Starting Android 5.0, WebView is distributed through Google Play Store. Starting Android 7.0, WebView uses Chrome browser app or System WebView app when Chrome browser is disabled.&lt;/p&gt;
&lt;p&gt;Downside of newer implementation starting Android 5.0: Since System WebView implementation is distributed through Play Store and no more bundled in Android OS, its challenging for OEMs to keep their implementation of WebView in sync with Play Store’s System WebView. The two can go out of sync very quickly.&lt;/p&gt;
&lt;h3&gt;Behaviors:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Any links embedded in a WebView widget will open in a WebView in Android 5.0 and over. &lt;/li&gt;
&lt;li&gt;On Android 4.4 and below, links embedded in a WebView will open in a Web Browser rather than in a WebView widget&lt;/li&gt;
&lt;li&gt;By default, javascript is disabled in WebView widget. It can be turned on by &lt;code&gt;getSettings().setJavaScriptEnabled(true)&lt;/code&gt;. I’ve created convenience class &lt;code&gt;WebViewHelper&lt;/code&gt; around &lt;code&gt;android.webkit.WebView&lt;/code&gt; class features.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Using from Android Studio:&lt;/h3&gt;
&lt;p&gt;Add following in your project's &lt;code&gt;build.gradle&lt;/code&gt; under &lt;code&gt;dependencies&lt;/code&gt; block.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;compile &amp;#39;org.ptyagicodecamp:webview-android:0.0.2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;How to use &lt;code&gt;WebViewHelper&lt;/code&gt; class ?&lt;/h3&gt;
&lt;h5&gt;Initializing&lt;/h5&gt;
&lt;p&gt;You would need to pass reference to &lt;code&gt;WebView&lt;/code&gt; widget into &lt;code&gt;WebViewHelper&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;WebViewHelper webViewHelper;
....

@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        webView = (WebView) findViewById(R.id.webView);
        //initialize WebViewHelper
        webViewHelper = new WebViewHelper(webView);
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Using library&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public void loadUrl(View view) {
        webViewHelper.loadUrl(&amp;quot;https://ptyagicodecamp.github.io/&amp;quot;);
    }

    public void loadData(View view) {
        webViewHelper.loadData(&amp;quot;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;\&amp;quot;https://ptyagicodecamp.github.io/\&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click Here to visit my Blog&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&amp;quot;);
    }

    public void toggleJavaScript(View view) {

        if (((ToggleButton)view).isChecked()) {
            webViewHelper.enableJS();
            Toast.makeText(this, &amp;quot;Javascript is enabled&amp;quot;, Toast.LENGTH_LONG).show();
        } else {
            webViewHelper.disableJS();
            Toast.makeText(this, &amp;quot;Javascript is disabled&amp;quot;, Toast.LENGTH_LONG).show();
        }
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Source code is available &lt;a href="https://github.com/ptyagicodecamp/webview-android"&gt;here&lt;/a&gt;
&lt;/p&gt;</summary><category term="android"></category><category term="webview"></category><category term="library"></category><category term="open-source"></category><category term="dev"></category></entry><entry><title>My take on Pelican and Github pages from a beginner's perspective</title><link href="http://ptyagicodecamp.github.io/my-take-on-pelican-and-github-pages-from-a-beginners-perspective.html" rel="alternate"></link><published>2016-12-08T10:20:00-07:00</published><updated>2016-12-08T10:20:00-07:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2016-12-08:my-take-on-pelican-and-github-pages-from-a-beginners-perspective.html</id><summary type="html">&lt;h3&gt;Setting up environment:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First we need a pacakge manager to install necessery tools and packages. I chose Homebrew. Install Homebrew package manager and other needed tools for Mac by pasting this command in terminal:
&lt;code&gt;/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
brew install wget&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, use Homebrew to install python, pip and other related tools. As time of this writing, it will install Python 2.7.12. 
&lt;code&gt;brew install python&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setup  &lt;a href="https://virtualenv.pypa.io/en/stable/"&gt;vitutalenv tool&lt;/a&gt; to keep python installations separate in their own sandbox: &lt;code&gt;pip install virtualenv&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating virtualenv for pelican
    &lt;code&gt;mkdir -p ~/virtualenvs
    cd ~/virtualenvs
    virtualenv pelican
    cd pelican
    source bin/activate&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install pelican: &lt;code&gt;pip install pelican&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Install markdown package: &lt;code&gt;pip install pelican markdown&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Setting up github repos:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;One repo for source code for blog generator: ptyagicodecamp.github.io-src&lt;/li&gt;
&lt;li&gt;One repo for generated html blog contents: ptyagicodecamp.github.io&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Setting up Blog with Pelican:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Clone github source repo into your local working directory:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/ptyagicodecamp/ptyagicodecamp.github.io-src.git githubpages
cd githubpages
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create output directory inside &lt;code&gt;githubpages&lt;/code&gt; directory to hold generated html pages to add it as a git submodule: &lt;code&gt;git submodule add https://github.com/ptyagicodecamp/ptyagicodecamp.github.io.git output&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setup pelican : &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart
&amp;gt; Where do you want to create your new web site? [.]
&amp;gt; What will be the title of this web site? **Title of your blog**   
&amp;gt; Who will be the author of this web site? **your name**
&amp;gt; What will be the default language of this web site? [en]
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) Y
&amp;gt; What is your URL prefix? (see above example; no trailing slash) http://username.github.io
&amp;gt; Do you want to enable article pagination? (Y/n)
&amp;gt; How many articles per page do you want? [10]
&amp;gt; What is your time zone? [Europe/Paris]    America/Mazatlan
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) Y
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) Y
&amp;gt; Do you want to upload your website using FTP? (y/N) N
&amp;gt; Do you want to upload your website using SSH? (y/N) N
&amp;gt; Do you want to upload your website using Dropbox? (y/N) N
&amp;gt; Do you want to upload your website using S3? (y/N) N
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) N
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) Y
&amp;gt; Is this your personal page (username.github.io)? (y/N) Y
Error: [Errno 17] File exists: &amp;#39;~/githubpages/content&amp;#39;
Error: [Errno 17] File exists: &amp;#39;~/githubpages/output&amp;#39;
Done. Your new project is available at ~/githubpages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: Make DELETE_OUTPUT_DIRECTORY = False in publishconf.py to NOT delete output dir, since its a submodule.&lt;/p&gt;
&lt;h3&gt;Writing your first blog post:&lt;/h3&gt;
&lt;p&gt;Don't forget to install Markdown package: &lt;code&gt;pip install Markdown&lt;/code&gt;. Also, don’t overlook that “.md” files needs meta-data at the beginning of file. Failing to do so, would give error that “NameTile” is failing. Meta data looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Modified&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;publishing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, write your first blog post by typing in terminal(or your faviorite editor) : &lt;code&gt;vi content/&amp;lt;post-name&amp;gt;.md&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note: you're not required to use '.md' formatting, you can also use &lt;code&gt;.rst&lt;/code&gt; formats too.&lt;/p&gt;
&lt;h3&gt;Build, Commit and Push posts :&lt;/h3&gt;
&lt;p&gt;Note: if you run into issue that pelicanconf.py doesn't exist, its because you may not have python environment loaded. You would need to execute this on terminal re-activate environment: source ~/virtualenvs/pelican/bin/activate&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To generate HTML contents and start local webserver, type this on terminal: 'make html &amp;amp;&amp;amp; make serve`&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate website using: &lt;code&gt;make publish&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Committing to Github:
At this point you can add all contents to github. 
To add submodule in output directory:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd  output
git add .
git commit -m “Adding my contents”
git push -u origin master
cd ..
echo “*.pyc” &amp;gt;&amp;gt; .gitignore #you can also add this by manually editing .gitignore file
git add .
git commit -m “first commit”
git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Visting your Brand new Blog&lt;/h3&gt;
&lt;p&gt;You can visit your blog at https://username.github.io&lt;/p&gt;
&lt;h3&gt;Script to publish and push to github repo automatically:&lt;/h3&gt;
&lt;p&gt;I created &lt;code&gt;publish-n-push.sh&lt;/code&gt; script to automate generating html contents and pushing everything to github:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &amp;quot;publising changes...&amp;quot;
make html &amp;amp;&amp;amp; make publish
echo &amp;quot;pushing code to source repo...&amp;quot;
git add .
git commit -m &amp;quot;$1&amp;quot;
git push origin master
echo &amp;quot;pushing generated website to github&amp;quot;
cd output
git add .
git commit -m &amp;quot;$1&amp;quot;
git push origin master
cd ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using this script: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd githubpages
./publish-n-push.sh &amp;quot;commit-message&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Here's wonderful tutorial about &lt;a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/"&gt;Markdown syntax&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;I refered &lt;a href="https://fedoramagazine.org/make-github-pages-blog-with-pelican/"&gt;this&lt;/a&gt; tutorial as a reference.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="pelican"></category><category term="github"></category><category term="githubpages"></category><category term="python"></category><category term="web"></category><category term="dev"></category></entry></feed>