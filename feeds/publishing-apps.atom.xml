<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>techLog - publishing-apps</title><link href="https://ptyagicodecamp.github.io/" rel="alternate"></link><link href="https://ptyagicodecamp.github.io/feeds/publishing-apps.atom.xml" rel="self"></link><id>https://ptyagicodecamp.github.io/</id><updated>2021-03-20T00:00:00-04:00</updated><subtitle>Explore | Android | Flutter | Software Engineering</subtitle><entry><title>Flavoring Flutter Applications (Android &amp; iOS)</title><link href="https://ptyagicodecamp.github.io/flavoring-flutter-applications-android-ios.html" rel="alternate"></link><published>2021-03-20T00:00:00-04:00</published><updated>2021-03-20T00:00:00-04:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2021-03-20:/flavoring-flutter-applications-android-ios.html</id><summary type="html">&lt;p&gt;This article describes the process of publishing Flutter applications on Android and iOS platforms in development and production environments.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="header-flutter-flavors" src="https://ptyagicodecamp.github.io/header_flutter_flavors.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Target Audience:&lt;/strong&gt; Beginner&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recipe:&lt;/strong&gt; Publish Flutter application on Android and iOS platforms for development(dev) and production (prod) environments.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Checkout the companion video tutorial:&lt;/strong&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/Suv8-w-SiXw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;In this article, I will give overview of the process of publishing Flutter applications on Android and iOS platforms in multiple environments. In real-world applications development process, there are multiple environments and/or stages an applications is released in. During development stage, you may want to share your app to internal testers with a backend configured for development but not ready for production purpose. If you want to distribute your app to internal testers, you need a &lt;code&gt;dev&lt;/code&gt; variant for the application.&lt;/p&gt;
&lt;p&gt;When you are ready to roll-out the application for public release and have production backend ready, you need a variant of same app which is connected to the production backend. Let's call this variant of app as &lt;code&gt;prod&lt;/code&gt; flavor.&lt;/p&gt;
&lt;h1&gt;Pre-requisites&lt;/h1&gt;
&lt;p&gt;In this article, I will use default &lt;code&gt;CounterApp&lt;/code&gt; in two variants or flavors: &lt;code&gt;dev&lt;/code&gt; for development, and &lt;code&gt;prod&lt;/code&gt; for production. Let's assume this app uses Firebase for backend. The &lt;code&gt;dev&lt;/code&gt; flavor/variant of app uses one instance of Firebase project, and &lt;code&gt;prod&lt;/code&gt; flavor uses different instance of Firebase project.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Flutter App Setup&lt;/h1&gt;
&lt;h2&gt;AppConfig&lt;/h2&gt;
&lt;p&gt;Create a class &lt;code&gt;AppConfig&lt;/code&gt; to encapsulate the app's environment/flavor type and specific name for that flavor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AppConfig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;appName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;final&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;flavor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;AppConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;@required&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;appName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;@required&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flavor&lt;/span&gt;&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Entry point for &lt;code&gt;dev&lt;/code&gt; flavor&lt;/h2&gt;
&lt;p&gt;Create a file &lt;code&gt;lib/main_dev.dart&lt;/code&gt; to run app in &lt;code&gt;dev&lt;/code&gt; flavor. This is where you assign the flavor type and specific name for App based on that flavor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;void main() async {&lt;/span&gt;
&lt;span class="err"&gt;  AppConfig devAppConfig = AppConfig(appName: &amp;#39;CounterApp Dev&amp;#39;, flavor: &amp;#39;dev&amp;#39;);&lt;/span&gt;
&lt;span class="err"&gt;  Widget app = await initializeApp(devAppConfig);&lt;/span&gt;
&lt;span class="err"&gt;  runApp(app);&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Entry point for &lt;code&gt;prod&lt;/code&gt; flavor&lt;/h2&gt;
&lt;p&gt;Create a file &lt;code&gt;lib/main_prod.dart&lt;/code&gt; to run app in &lt;code&gt;prod&lt;/code&gt; flavor. This is where you assign the flavor type and specific name for App based on that flavor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;void main() async {&lt;/span&gt;
&lt;span class="err"&gt;  AppConfig devAppConfig =&lt;/span&gt;
&lt;span class="err"&gt;      AppConfig(appName: &amp;#39;CounterApp Prod&amp;#39;, flavor: &amp;#39;prod&amp;#39;);&lt;/span&gt;
&lt;span class="err"&gt;  Widget app = await initializeApp(devAppConfig);&lt;/span&gt;
&lt;span class="err"&gt;  runApp(app);&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;p&gt;&lt;img alt="flutter-flavors" src="https://ptyagicodecamp.github.io/flutter_flavors.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;Android&lt;/h1&gt;
&lt;p&gt;Let's configure environment variants (a.k.a Flavors) at Android platform. At this point you should have two Firebase projects setup dedicated for &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;prod&lt;/code&gt; environment/flavor each.&lt;/p&gt;
&lt;h1&gt;Firebase Configuration Files&lt;/h1&gt;
&lt;p&gt;First step is to download &lt;code&gt;google-services.json&lt;/code&gt; file(s) from each Firebase project to a temporary location at your machine. Next, create two folders &lt;code&gt;android/app/src/dev&lt;/code&gt; and &lt;code&gt;android/app/src/prod&lt;/code&gt; for each flavor. The Firebase configuration files go under in their flavor folders under &lt;code&gt;android/app/src/&lt;/code&gt; folder..Copy the respective &lt;code&gt;google-services.json&lt;/code&gt; files into their flavor folders respectively.
* dev flavor: &lt;code&gt;android/app/src/dev/google-services.json&lt;/code&gt;
* prod flavor: &lt;code&gt;android/app/src/prod/google-services.json&lt;/code&gt;&lt;/p&gt;
&lt;h1&gt;Setup Flavors&lt;/h1&gt;
&lt;p&gt;Next step is to define flavors in &lt;code&gt;app/build.gradle&lt;/code&gt; file as shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;


    &lt;span class="n"&gt;defaultConfig&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;applicationId&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;com.pcc.counterapp&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;minSdkVersion&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
        &lt;span class="n"&gt;targetSdkVersion&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
        &lt;span class="n"&gt;versionCode&lt;/span&gt; &lt;span class="n"&gt;flutterVersionCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toInteger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;versionName&lt;/span&gt; &lt;span class="n"&gt;flutterVersionName&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;...&lt;/span&gt;

    &lt;span class="n"&gt;flavorDimensions&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;counterapp&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;productFlavors&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;dimension&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;counterapp&amp;quot;&lt;/span&gt;
            &lt;span class="n"&gt;applicationIdSuffix&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;.dev&amp;quot;&lt;/span&gt;
            &lt;span class="n"&gt;resValue&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;app_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Counter App Dev&amp;quot;&lt;/span&gt;
            &lt;span class="n"&gt;versionNameSuffix&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;.dev&amp;quot;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;prod&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;dimension&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;counterapp&amp;quot;&lt;/span&gt;
            &lt;span class="n"&gt;applicationIdSuffix&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;.prod&amp;quot;&lt;/span&gt;
            &lt;span class="n"&gt;resValue&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;app_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Counter App Prod&amp;quot;&lt;/span&gt;
            &lt;span class="n"&gt;versionNameSuffix&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;.prod&amp;quot;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That is all you need to enable flavors at Android side.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;iOS&lt;/h1&gt;
&lt;p&gt;Let's create &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;prod&lt;/code&gt; environments(a.k.a Schemes) at iOS platform. We need to setup custom schemes at iOS  side to support multiple variants.&lt;/p&gt;
&lt;h1&gt;Firebase Config files&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Copy GooglePlayServices files under &lt;code&gt;config/dev&lt;/code&gt; and &lt;code&gt;config/prod&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Copy the &lt;code&gt;config&lt;/code&gt; folder into the Xcode (drag and drop under Runner project)&lt;/li&gt;
&lt;li&gt;Targets -&amp;gt; Runner -&amp;gt; Build Phase: Add script to copy correct GooglePlaySerivce file for the correct scheme.
Move the script right after&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Regex to extract the scheme name from the Build Configuration&lt;/span&gt;
&lt;span class="c1"&gt;# We have named our Build Configurations as Debug-dev, Debug-prod etc.&lt;/span&gt;
&lt;span class="c1"&gt;# Here, dev and prod are the scheme names. This kind of naming is required by Flutter for flavors to work.&lt;/span&gt;
&lt;span class="c1"&gt;# We are using the $CONFIGURATION variable available in the XCode build environment to extract&lt;/span&gt;
&lt;span class="c1"&gt;# the environment (or flavor)&lt;/span&gt;
&lt;span class="c1"&gt;# For eg.&lt;/span&gt;
&lt;span class="c1"&gt;# If CONFIGURATION=&amp;quot;Debug-prod&amp;quot;, then environment will get set to &amp;quot;prod&amp;quot;.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;CONFIGURATION&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;^-&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="p"&gt;]];&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;
&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;=$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;BASH_REMATCH&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;span class="n"&gt;fi&lt;/span&gt;

&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;

&lt;span class="c1"&gt;# Name and path of the resource we&amp;#39;re copying&lt;/span&gt;
&lt;span class="n"&gt;GOOGLESERVICE_INFO_PLIST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;GoogleService&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plist&lt;/span&gt;
&lt;span class="n"&gt;GOOGLESERVICE_INFO_FILE&lt;/span&gt;&lt;span class="o"&gt;=$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;PROJECT_DIR&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;GOOGLESERVICE_INFO_PLIST&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Make sure GoogleService-Info.plist exists&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Looking for ${GOOGLESERVICE_INFO_PLIST} in ${GOOGLESERVICE_INFO_FILE}&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="n"&gt;GOOGLESERVICE_INFO_FILE&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;then&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;No GoogleService-Info.plist found. Please ensure it&amp;#39;s in the proper directory.&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;exit&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;fi&lt;/span&gt;

&lt;span class="c1"&gt;# Get a reference to the destination location for the GoogleService-Info.plist&lt;/span&gt;
&lt;span class="c1"&gt;# This is the default location where Firebase init code expects to find GoogleServices-Info.plist file&lt;/span&gt;
&lt;span class="n"&gt;PLIST_DESTINATION&lt;/span&gt;&lt;span class="o"&gt;=$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;BUILT_PRODUCTS_DIR&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;PRODUCT_NAME&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;
&lt;span class="n"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Will copy ${GOOGLESERVICE_INFO_PLIST} to final destination: ${PLIST_DESTINATION}&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Copy over the prod GoogleService-Info.plist for Release builds&lt;/span&gt;
&lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${GOOGLESERVICE_INFO_FILE}&amp;quot;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${PLIST_DESTINATION}&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Note: I borrowed this script from &lt;a href="https://medium.com/@animeshjain/build-flavors-in-flutter-android-and-ios-with-different-firebase-projects-per-flavor-27c5c5dac10b"&gt;this great article&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Custom Schemes&lt;/h1&gt;
&lt;p&gt;You need to create two schemes for two different environments: &lt;code&gt;dev&lt;/code&gt; &amp;amp; &lt;code&gt;prod&lt;/code&gt;. Follow the directions below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create Scheme: dev -&amp;gt; Create debug, release and profile configuration for this new scheme (Project Runner -&amp;gt; Configuration-&amp;gt; Duplicate debug, release and profile configs for dev scheme)&lt;/li&gt;
&lt;li&gt;Rename existing Runner default scheme to prod.&lt;/li&gt;
&lt;li&gt;Manage scheme -&amp;gt; Assign correct configuration to its corresponding scheme.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this point, if you run &lt;code&gt;flutter run -t lib/main_dev.dart --flavor dev&lt;/code&gt; in CLI, you will see information to complete the custom scheme. Finish the custom scheme setup as directed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Xcode&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;defines&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;configurations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Release&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Profile&lt;/span&gt;
&lt;span class="n"&gt;Flutter&lt;/span&gt; &lt;span class="n"&gt;expects&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="n"&gt;named&lt;/span&gt; &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="k"&gt;or&lt;/span&gt; &lt;span class="k"&gt;similar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="k"&gt;Open&lt;/span&gt; &lt;span class="n"&gt;Xcode&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;fix&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;problem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="n"&gt;ios&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Runner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xcworkspace&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Click&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Runner&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt; &lt;span class="n"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Ensure&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Runner&lt;/span&gt; &lt;span class="n"&gt;PROJECT&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Runner&lt;/span&gt; &lt;span class="n"&gt;TARGET&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Editor&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Duplicate&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Debug&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;Configuration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

   &lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="k"&gt;option&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;disabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;likely&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="k"&gt;instead&lt;/span&gt;
   &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;see&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;stackoverflow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;questions&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;19842746&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;adding&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;configuration&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;xcode&lt;/span&gt;

   &lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;have&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;completely&lt;/span&gt; &lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;configurations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;FLUTTER_BUILD_MODE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;
   &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xcconfig&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Xcode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="k"&gt;If&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="k"&gt;are&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;completely&lt;/span&gt; &lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;configurations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;newly&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="n"&gt;configuration&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Could&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;precompiled&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h1&gt;Scheme specific Product bundle identifier&lt;/h1&gt;
&lt;p&gt;Remember to assign correct bundle identifier for each scheme as described below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Targets -&amp;gt; Runner -&amp;gt; Build Settings -&amp;gt; Product Bundle Identifier
Assign the correct bundle identifier for each item as shown in screenshot below.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="iOS-Product-bundle-indentifier" src="https://ptyagicodecamp.github.io/product_bundle_identifiers.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Running App&lt;/h1&gt;
&lt;p&gt;I find following commands handy on CLI to run app for specific flavors:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#Run app in `dev` environment&lt;/span&gt;
&lt;span class="n"&gt;flutter&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main_dev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dart&lt;/span&gt;  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;flavor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;

&lt;span class="c1"&gt;# Run app in debug mode (Picks up debug signing config)&lt;/span&gt;
&lt;span class="n"&gt;flutter&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main_dev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dart&lt;/span&gt;  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;flavor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;

&lt;span class="c1"&gt;# Run app in release mode (Picks up release signing config)&lt;/span&gt;
&lt;span class="n"&gt;flutter&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main_dev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dart&lt;/span&gt;  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="k"&gt;release&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;flavor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;

&lt;span class="c1"&gt;# Create appBundle for Android platform. Runs in release mode by default.&lt;/span&gt;
&lt;span class="n"&gt;flutter&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;appbundle&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main_dev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dart&lt;/span&gt;  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;flavor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;

&lt;span class="c1"&gt;# Create APK for dev flavor. Runs in release mode by default.&lt;/span&gt;
&lt;span class="n"&gt;flutter&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt; &lt;span class="n"&gt;apk&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;main_dev&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dart&lt;/span&gt;  &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;flavor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace &lt;code&gt;dev&lt;/code&gt; with &lt;code&gt;prod&lt;/code&gt; to run and build app for production environment.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Source Code Repo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Recipe source code for this example is available &lt;a href="https://github.com/ptyagicodecamp/counterapp_flavors"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://medium.com/@salvatoregiordanoo/flavoring-flutter-392aaa875f36"&gt;Flavoring Flutter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flutter.dev/docs/deployment/flavors"&gt;Creating Flavors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/@animeshjain/build-flavors-in-flutter-android-and-ios-with-different-firebase-projects-per-flavor-27c5c5dac10b"&gt;Build flavors in Flutter (Android and iOS) with different Firebase projects per flavor&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Happy cooking with Flutter :)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Liked the article?Liked the article? Let me know with 👏👏👏&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Couldn't find a topic of interest? Please leave comments or &lt;a href="mailto:ptyagicodecamp@gmail.com"&gt;email me&lt;/a&gt; about topics you would like me to write !
&lt;a href="https://www.paypal.me/pritya"&gt;BTW I love cupcakes and coffee both :)&lt;/a&gt;_&lt;/p&gt;
&lt;p&gt;Follow me at &lt;a href="https://medium.com/@ptyagicodecamp"&gt;Medium&lt;/a&gt;
Follow me at &lt;a href="https://twitter.com/ptyagi13"&gt;twitter&lt;/a&gt;&lt;/p&gt;</content><category term="publishing-apps"></category><category term="flavors"></category><category term="publishing"></category><category term="cross-platform"></category><category term="Flutter"></category><category term="code-recipes"></category><category term="Android"></category><category term="Android Studio"></category><category term="iOS"></category><category term="development"></category></entry></feed>