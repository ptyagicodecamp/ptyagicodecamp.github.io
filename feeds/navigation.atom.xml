<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>techLog - Navigation</title><link href="https://ptyagicodecamp.github.io/" rel="alternate"></link><link href="https://ptyagicodecamp.github.io/feeds/navigation.atom.xml" rel="self"></link><id>https://ptyagicodecamp.github.io/</id><updated>2020-06-12T00:00:00-04:00</updated><subtitle>Explore | Android | Flutter | Software Engineering</subtitle><entry><title>Navigation and Routing in Flutter App</title><link href="https://ptyagicodecamp.github.io/navigation-and-routing-in-flutter-app.html" rel="alternate"></link><published>2020-06-12T00:00:00-04:00</published><updated>2020-06-12T00:00:00-04:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2020-06-12:/navigation-and-routing-in-flutter-app.html</id><summary type="html">&lt;p&gt;In this article, we'll learn about navigation and routing in a Flutter app.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;IN PROGRESS: COMING SOON&lt;/h1&gt;
&lt;p&gt;&lt;img alt="TODO" src="https://ptyagicodecamp.github.io/TODO.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Target Audience:&lt;/strong&gt; Beginner&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recipe:&lt;/strong&gt; Implement Navigation from home page to another page using three different ways.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Focus Widget:&lt;/strong&gt; &lt;a href="https://api.flutter.dev/flutter/widgets/Navigator-class.html"&gt;Navigator&lt;/a&gt; Widget&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Goals:&lt;/strong&gt; We'll implement navigation from homepage's list item to its detailed view. In this recipe, we'll do two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User Interface:&lt;/strong&gt;: Create a homepage, &lt;code&gt;PageListing&lt;/code&gt; - consists of three items. Another page, &lt;code&gt;PageDetails&lt;/code&gt; to display details for each item. Clicking on an item in &lt;code&gt;PageListing&lt;/code&gt; page, will open the detailed view - &lt;code&gt;PageDetails&lt;/code&gt; for that item.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Navigation:&lt;/strong&gt; Implement navigation from PageListing (homepage) to PageDetails (details page).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sending data from PageListing to PageDetails page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Receiving data from PageDetails page.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Checkout the companion video tutorial:&lt;/strong&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/TODO" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Building Interface&lt;/h1&gt;
&lt;h2&gt;&lt;code&gt;PageListing&lt;/code&gt; Screen&lt;/h2&gt;
&lt;p&gt;&lt;img alt="PageListing" src="https://ptyagicodecamp.github.io/nav-pagelisting.jpg"&gt;&lt;/p&gt;
&lt;p&gt;A minimal home page &lt;code&gt;PageListing&lt;/code&gt; consists of three list items. Each item has a picture and sample title.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;Item&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;A data model &lt;code&gt;Item&lt;/code&gt; to represent each row in homepage's list.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;PageDetails&lt;/code&gt; Screen&lt;/h2&gt;
&lt;p&gt;&lt;img alt="PageDetails" src="https://ptyagicodecamp.github.io/nav-pagedetails.jpg"&gt;&lt;/p&gt;
&lt;p&gt;A page to show list entry &lt;code&gt;Item&lt;/code&gt;'s detailed view. It's a simple page displaying item's image, details and its name in appBar.&lt;/p&gt;
&lt;h2&gt;FAB on &lt;code&gt;PageDetails&lt;/code&gt; Screen&lt;/h2&gt;
&lt;p&gt;There's a &lt;code&gt;floatingActionButton&lt;/code&gt; in &lt;code&gt;PageDetails&lt;/code&gt; to demonstrate passing data from detailed page back to homepage.&lt;/p&gt;
&lt;h1&gt;Navigation&lt;/h1&gt;
&lt;p&gt;There are three ways to create navigation in Flutter
  - Direct Navigation: Direct navigation is implemented with &lt;a href="https://api.flutter.dev/flutter/material/MaterialPageRoute-class.html"&gt;MaterialPageRoute&lt;/a&gt;. This is also known as un-named routing.
  - Static Navigation: Static navigation is implemented by assigning a map of routes to MaterialApp's &lt;code&gt;routes&lt;/code&gt; property. The route name is pushed using &lt;code&gt;Navigator.pushNamed(...)&lt;/code&gt;.  This is known as Named Routing.
  - Dynamic Navigation: In this navigation, routes are generated by implementing &lt;code&gt;onGenerateRoute&lt;/code&gt; callback in the &lt;code&gt;MaterialApp&lt;/code&gt; class. This is a type of Named Routing as well.&lt;/p&gt;
&lt;h2&gt;Un-Named Routing&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Un-Named-Navigation" src="https://ptyagicodecamp.github.io/unnamed-navigation.jpg"&gt;&lt;/p&gt;
&lt;p&gt;In un-name routing, the &lt;code&gt;MaterialPageRoutes&lt;/code&gt; is pushed directly to the navigator. This approach contributes to boilerplate code which multiplies with growing screens/pages. It is very hard to keep track of logic around these routes since its spread out in multiple classes.&lt;/p&gt;
&lt;h2&gt;Named Routing Using &lt;code&gt;routes&lt;/code&gt; Property&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Named-Navigation-static" src="https://ptyagicodecamp.github.io/named-navigation-map.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The MaterialApp and WidgetApp provides the &lt;code&gt;routes&lt;/code&gt; property. This property allows to specify routes in &lt;code&gt;Map&amp;lt;String, WidgetBuilder&amp;gt;&lt;/code&gt;.
This option is great when there is no logic around the routes. For example, authentication or verification before you show the page. Only the data available global to app can be passed on to the second page.&lt;/p&gt;
&lt;h2&gt;Dynamic Named Routing Using &lt;code&gt;onGenerateRoute&lt;/code&gt; Property&lt;/h2&gt;
&lt;p&gt;&lt;img alt="Named-Navigation-dynamic" src="https://ptyagicodecamp.github.io/named-navigation-generate.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The MaterialApp and WidgetApp provides the &lt;code&gt;onGenerateRoute&lt;/code&gt; property. It lets you specify a function returning a route. It can let the data pass using &lt;code&gt;settings&lt;/code&gt;. Any verification logic can be easily be applied before showing the target page. There's always an option to default "not found" page when route or match is not found.&lt;/p&gt;
&lt;h3&gt;Passing Data to Second Screen - &lt;code&gt;PageDetails&lt;/code&gt;&lt;/h3&gt;
&lt;h3&gt;Receiving Data from Second Screen - &lt;code&gt;PageDetails&lt;/code&gt;&lt;/h3&gt;
&lt;hr&gt;
&lt;h1&gt;Source Code Repo&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Recipe source code for &lt;code&gt;TODO&lt;/code&gt; class is available &lt;a href=""&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flutter Cookbook project's source code is available &lt;a href="https://github.com/ptyagicodecamp/flutter_cookbook/tree/widgets/flutter_widgets/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;p&gt;Happy cooking with Flutter :)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Liked the article?
Couldn't find a topic of your interest? Please leave comments or &lt;a href="mailto:ptyagicodecamp@gmail.com"&gt;email me&lt;/a&gt; about topics you would like me to write!
&lt;a href="https://www.paypal.me/pritya"&gt;BTW I love cupcakes and coffee both :)&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Follow me at &lt;a href="https://twitter.com/ptyagi13"&gt;twitter&lt;/a&gt;&lt;/p&gt;</content><category term="Navigation"></category><category term="Routing"></category><category term="cross-platform"></category><category term="Flutter"></category><category term="code-recipes"></category><category term="Android"></category><category term="Android Studio"></category><category term="iOS"></category><category term="development"></category></entry></feed>