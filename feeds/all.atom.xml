<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>techLog</title><link href="http://ptyagicodecamp.github.io/" rel="alternate"></link><link href="http://ptyagicodecamp.github.io/feeds/all.atom.xml" rel="self"></link><id>http://ptyagicodecamp.github.io/</id><updated>2017-01-09T11:16:00-07:00</updated><entry><title>Android WebViewOverlay Widget</title><link href="http://ptyagicodecamp.github.io/android-webviewoverlay-widget.html" rel="alternate"></link><published>2017-01-09T11:16:00-07:00</published><updated>2017-01-09T11:16:00-07:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2017-01-09:android-webviewoverlay-widget.html</id><summary type="html">&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;I needed a widget that can load a url in WebView in a full-screen closable overlay/modal.
I wanted to re-use this new, shiny widget in my other projects as well. So, I decided to upload
WebViewOverlay library in a central artifact repository. I chose JCenter because its one of the
largest artifact repository for Java and Android libraries and has good integration with Android Studio IDE.
If you're interested in learning how did I publish Android libary to JCenter,
then &lt;a href="https://ptyagicodecamp.github.io/how-did-i-publish-library-to-jcenter-from-android-studio.html"&gt;this post&lt;/a&gt;
will be helpful for you.&lt;/p&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This article describes how WebViewOverlay Widget can be integrated to your Android App in few minutes.
Integrating WebViewOverlay widget in your app is as simple as adding following line in your project's
&lt;code&gt;build.gradle&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;compile &amp;#39;org.ptyagicodecamp:WebViewOverlay:1.0.0&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;WebViewOverlay Widget&lt;/h2&gt;
&lt;p&gt;WebViewOverlay widget loads a WebView widget in a full screen pop-up or modal. It has option to close it by
clicking on top-right corner 'x'&lt;/p&gt;
&lt;h2&gt;API&lt;/h2&gt;
&lt;p&gt;There're two APIs to load WebView either in full-screen mode or in a dialog with a custom title.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Full Screen Overlay&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;void loadWebViewOverlay(String urlToBeLoaded, HashMap&amp;lt;String, String&amp;gt; params);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="Overlay FullScreen" src="http://ptyagicodecamp.github.io/OverlayFullScreen.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Full Screen Overlay With Custom Title&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;void loadWebViewOverlay(String urlToBeLoaded, HashMap&amp;lt;String, String&amp;gt; params, String popupTitle);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="OverlayWithTitle" src="http://ptyagicodecamp.github.io/OverlayWithTitle.png" /&gt;&lt;/p&gt;
&lt;h2&gt;Integration&lt;/h2&gt;
&lt;p&gt;In Android Studio, it can be added to your project by adding following in &lt;code&gt;build.gradle&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;compile &amp;#39;org.ptyagicodecamp:WebViewOverlay:1.0.2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Initialization&lt;/h2&gt;
&lt;p&gt;WebViewOverlay widget can be initialized in Activity or BaseActivity's &lt;code&gt;onCreate()&lt;/code&gt; method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;WebViewOverlay webViewOverlay;

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    webViewOverlay = new WebViewOverlay(this);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;After initializing widget, it can simply be used by calling either of the API.
Here's examples to demonstrate both APIs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;public&lt;/span&gt; &lt;span class="nt"&gt;void&lt;/span&gt; &lt;span class="nt"&gt;openWebViewOverlay&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;View&lt;/span&gt; &lt;span class="nt"&gt;view&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nb"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://ptyagicodecamp.github.io&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;webViewOverlay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loadWebViewOverlay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;public&lt;/span&gt; &lt;span class="nt"&gt;void&lt;/span&gt; &lt;span class="nt"&gt;openWebViewOverlayWithTitle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;View&lt;/span&gt; &lt;span class="nt"&gt;view&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="nb"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://ptyagicodecamp.github.io&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;webViewOverlay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loadWebViewOverlay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;url&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;WebViewOverlay Demo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you're interested in checking out source code, then its available &lt;a href="https://github.com/ptyagicodecamp/webview-overlay"&gt;here at Github&lt;/a&gt;&lt;/p&gt;</summary><category term="Android"></category><category term="WebView"></category><category term="WebViewOverlay"></category><category term="Library"></category><category term="OpenSource"></category><category term="Dev"></category></entry><entry><title>How did I publish Android Library to JCenter from Android Studio</title><link href="http://ptyagicodecamp.github.io/how-did-i-publish-android-library-to-jcenter-from-android-studio.html" rel="alternate"></link><published>2017-01-07T17:27:00-07:00</published><updated>2017-01-07T17:27:00-07:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2017-01-07:how-did-i-publish-android-library-to-jcenter-from-android-studio.html</id><summary type="html">&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;JCenter is a Maven Repository or file server hosted by &lt;a href="https://bintray.com/"&gt;Bintray&lt;/a&gt; for
Android libraries. It’s a default repository for Android Studio. To demonstrate the process of
publishing an OpenSource Android library, I'm using &lt;a href="https://ptyagicodecamp.github.io/webviewoverlay-widget-library.html"&gt;WebViewOverlay widget library&lt;/a&gt;
for example. After uploading to JCenter artifact repo, &lt;code&gt;WebViewOverlay&lt;/code&gt; widget can be dropped-in to your
project like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;compile &amp;#39;org.ptyagicodecamp:WebViewOverlay:1.0.0&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Uploading Android library (in aar format) to Bintray&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create log-in at &lt;a href="https://bintray.com/"&gt;Bintray&lt;/a&gt;. Scroll down to register for an open-source project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a new repo:
  &lt;img alt="Create Repo" src="http://ptyagicodecamp.github.io/create_repo.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fill-in all required information and click "create repo". It'll redirect to "package" screen.
  &lt;img alt="Repo Created" src="http://ptyagicodecamp.github.io/repo_created.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on “Create Package”. Fill in your package name and click on "Add New Package":
&lt;img alt="Add New Package" src="http://ptyagicodecamp.github.io/add_new_package.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It'll take you to enter package details. Fill-in details and click on "Create Package" at the bottom.
&lt;img alt="Create Package" src="http://ptyagicodecamp.github.io/create_package.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And you’re Done with registering your Maven repository on Bintray !&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: Link your Github account from Bintray, if you want to upload library from &lt;code&gt;build.gradle&lt;/code&gt; (Android Studio).
You can do this by going into your repository on Bintray and selecting "Import from Github” option.
It’ll guide you through with rest of the steps.&lt;/p&gt;
&lt;h3&gt;Setting up Android Studio Project&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Create a new project in Android Studio.&lt;/li&gt;
&lt;li&gt;Module &lt;code&gt;WebViewOverlay&lt;/code&gt; contains all the library code and module &lt;code&gt;app&lt;/code&gt; has sample app to demonstrate the usage of library.
Make sure that you name module same as of artifact name configured at Bintray. &lt;code&gt;WebViewOverlay&lt;/code&gt; in this example.
Refer to &lt;code&gt;WebViewOverlay&lt;/code&gt; at &lt;a href="https://github.com/ptyagicodecamp/webview-overlay"&gt;Github for source code&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Setup Android Studio project to be able to publish library to &lt;code&gt;jcenter()&lt;/code&gt; Maven repo, and
add Bintray plugin to project’s &lt;code&gt;build.gradle&lt;/code&gt;. Root level &lt;code&gt;build.gradle&lt;/code&gt; will look like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath &amp;#39;com.android.tools.build:gradle:2.2.3&amp;#39;
        classpath &amp;#39;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4&amp;#39;
        classpath &amp;#39;com.github.dcendents:android-maven-gradle-plugin:1.4.1&amp;#39;
    }
}

allprojects {
    repositories {
        jcenter()
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Update Bintray related credentials in &lt;code&gt;local.properties&lt;/code&gt; like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bintray.user=YOUR_BINTRAY_USERNAME
bintray.apikey=YOUR_BINTRAY_API_KEY
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: Look for &lt;strong&gt;API KEY&lt;/strong&gt; in your Profile section on Bintray.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add following in library module’s &lt;code&gt;build.gradle&lt;/code&gt;. In this case &lt;code&gt;build.gradle&lt;/code&gt; of &lt;code&gt;WebOverlay&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apply plugin: &amp;#39;com.android.library&amp;#39;

ext {
    bintrayRepo = &amp;#39;WebViewOverlay&amp;#39;
    bintrayName = &amp;#39;WebViewOverlay&amp;#39;

    publishedGroupId = &amp;#39;org.ptyagicodecamp&amp;#39;
    libraryName = &amp;#39;WebViewOverlay&amp;#39;
    artifact = &amp;#39;WebViewOverlay&amp;#39;

    libraryDescription = &amp;#39;A widget to load WebView as an Overlay.&amp;#39;

    siteUrl = &amp;#39;https://github.com/ptyagicodecamp/webview-overlay&amp;#39;
    gitUrl = &amp;#39;https://github.com/ptyagicodecamp/webview-overlay.git&amp;#39;

    libraryVersion = &amp;#39;1.0.0&amp;#39;

    developerId = &amp;#39;developerId&amp;#39;
    developerName = &amp;#39;Developer Name&amp;#39;
    developerEmail = &amp;#39;developer@email.com&amp;#39;

    licenseName = &amp;#39;The Apache Software License, Version 2.0&amp;#39;
    licenseUrl = &amp;#39;http://www.apache.org/licenses/LICENSE-2.0.txt&amp;#39;
    allLicenses = [&amp;quot;Apache-2.0&amp;quot;]
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Refer to &lt;a href="https://github.com/ptyagicodecamp/webview-overlay/blob/master/WebViewOverlay/build.gradle"&gt;this &lt;code&gt;build.gradle&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You would need to add these scripts in order to publish libraries to Bintray:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;//Add these lines to publish library to bintray. This is the readymade scripts made by github user nuuneoi to make uploading to bintray easy.
//Place it at the end of the file
apply from: &amp;#39;https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle&amp;#39;
apply from: &amp;#39;https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's all you ve to do in order to configure you Android Studio project.&lt;/p&gt;
&lt;h3&gt;Uploading to Bintray:&lt;/h3&gt;
&lt;p&gt;CD to Root of Android Studio Project, and run these commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gradlew install
gradlew bintrayUpload
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That’s it ! your artifact will be uploaded to Bintray.&lt;/p&gt;
&lt;h3&gt;Link to JCenter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Your package needs to be linked to JCenter to be able to be resolved.
&lt;img alt="Add to JCenter" src="http://ptyagicodecamp.github.io/add_to_jcenter.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It'll take couple of hours to get request approved. Once approved, you'll see you package like this:
&lt;img alt="Linked To JCenter" src="http://ptyagicodecamp.github.io/linked_to_jcenter.png" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: You will have to wait for couple of hours before it'll be synced on JCenter.
You can check if its available by going to "http://jcenter.bintray.com/&lt;path/to/package&gt;"&lt;/p&gt;
&lt;h3&gt;Start using your hosted library:&lt;/h3&gt;
&lt;p&gt;Now you can reference &lt;code&gt;WebViewOverlay&lt;/code&gt; library from your project's &lt;code&gt;build.gradle&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;compile &amp;#39;org.ptyagicodecamp:WebViewOverlay:1.0.0&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;References:&lt;/h3&gt;
&lt;p&gt;I followed &lt;a href="https://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en"&gt;this tutorial&lt;/a&gt; to get me setup at Bintray.&lt;/p&gt;</summary><category term="Bintray"></category><category term="Publishing"></category><category term="JCenter"></category><category term="Library"></category><category term="OpenSource"></category><category term="Dev"></category></entry><entry><title>Automatic Android APK Signing</title><link href="http://ptyagicodecamp.github.io/automatic-android-apk-signing.html" rel="alternate"></link><published>2016-12-20T12:51:00-07:00</published><updated>2016-12-20T12:51:00-07:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2016-12-20:automatic-android-apk-signing.html</id><summary type="html">&lt;h3&gt;Declaring Signing credentials&lt;/h3&gt;
&lt;p&gt;Never put your signing apk credentials in github or any public sharable place. Always put them in a non-committable file. I'll be using &lt;path-to-.gradle-dir&gt;/.gradle/.gradle.properties to store signing creds.&lt;/p&gt;
&lt;h4&gt;Declaring release apk credentials&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;RELEASE_KEYSTORE_FILE={path to your release keystore}
RELEASE_KEYSTORE_PASSWORD=*****
RELEASE_KEYSTORE_ALIAS=*****
RELEASE_KEYSTORE_PASSWORD=*****
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Declaring debug apk credentials&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DEBUG_KEYSTORE_FILE={path to your debug keystore}
DEBUG_KEYSTORE_PASSWORD=*****
DEBUG_KEYSTORE_ALIAS=*****
DEBUG_KEYSTORE_PASSWORD=*****
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: There is no quotes around file path, passwords and alias.&lt;/p&gt;
&lt;h3&gt;Defining Signing config in &lt;code&gt;build.gradle&lt;/code&gt;&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;signingConfigs {
        debug {
            storeFile file(new File(DEBUG_KEYSTORE_FILE))
            storePassword DEBUG_KEYSTORE_PASSWORD
            keyAlias DEBUG_KEY_ALIAS
            keyPassword DEBUG_KEY_PASSWORD
        }

        release {
            storeFile file(new File(RELEASE_KEYSTORE_FILE))
            storePassword RELEASE_KEYSTORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: Order of defining &lt;code&gt;buildTypes&lt;/code&gt; block and &lt;code&gt;signingConfigs&lt;/code&gt; block is very important. &lt;code&gt;signingConfigs&lt;/code&gt; comes before &lt;code&gt;buildTypes&lt;/code&gt; block.&lt;/p&gt;
&lt;h3&gt;Putting All together&lt;/h3&gt;
&lt;p&gt;Full signing configuration in &lt;code&gt;build.gradle&lt;/code&gt; will look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apply plugin: &amp;#39;com.android.application&amp;#39;

android {
    compileSdkVersion 22
    buildToolsVersion &amp;quot;22.0.1&amp;quot;

    defaultConfig {
        applicationId &amp;quot;com.myawesomeproject.id&amp;quot;
        minSdkVersion 14
        targetSdkVersion 24
        versionCode 1
        versionName &amp;quot;1.1&amp;quot;
    }

    signingConfigs {
        debug {
            storeFile file(new File(DEBUG_KEYSTORE_FILE))
            storePassword DEBUG_KEYSTORE_PASSWORD
            keyAlias DEBUG_KEY_ALIAS
            keyPassword DEBUG_KEY_PASSWORD
        }

        release {
            storeFile file(new File(RELEASE_KEYSTORE_FILE))
            storePassword RELEASE_KEYSTORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            minifyEnabled false
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile(&amp;#39;proguard-android.txt&amp;#39;), &amp;#39;proguard-rules.pro&amp;#39;
        }
    }
} //closing android block


dependencies {
    compile fileTree(dir: &amp;#39;libs&amp;#39;, include: [&amp;#39;*.jar&amp;#39;])
} 
&lt;/pre&gt;&lt;/div&gt;</summary><category term="android"></category><category term="gradle"></category><category term="signing"></category><category term="apk"></category><category term="dev"></category></entry><entry><title>WebViewHelper library</title><link href="http://ptyagicodecamp.github.io/webviewhelper-library.html" rel="alternate"></link><published>2016-12-16T15:06:00-07:00</published><updated>2016-12-16T15:06:00-07:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2016-12-16:webviewhelper-library.html</id><summary type="html">&lt;h3&gt;A little about WebView widgets:&lt;/h3&gt;
&lt;p&gt;Webview widget is used to display HTML contents in an Android app. HTML contents can be rendered in a TextView widget using Html.fromHtml() method to parse very basic text. So why do we need WebView widget ? WebView widget is capable of handling more advanced HTML tags, Javascript and CSS, which gives a native feel to HTML contents right in your app. But this doesn't come for free. WebViews are more memory intensive when compared to TextView widget.&lt;/p&gt;
&lt;h3&gt;Background:&lt;/h3&gt;
&lt;p&gt;Pre Android 4.4, WebView was powered by WebKit. Starting Android 4.4, it’s powered by Chromium. Starting Android 5.0, WebView is distributed through Google Play Store. Starting Android 7.0, WebView uses Chrome browser app or System WebView app when Chrome browser is disabled.&lt;/p&gt;
&lt;p&gt;Downside of newer implementation starting Android 5.0: Since System WebView implementation is distributed through Play Store and no more bundled in Android OS, its challenging for OEMs to keep their implementation of WebView in sync with Play Store’s System WebView. The two can go out of sync very quickly.&lt;/p&gt;
&lt;h3&gt;Behaviors:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Any links embedded in a WebView widget will open in a WebView in Android 5.0 and over. &lt;/li&gt;
&lt;li&gt;On Android 4.4 and below, links embedded in a WebView will open in a Web Browser rather than in a WebView widget&lt;/li&gt;
&lt;li&gt;By default, javascript is disabled in WebView widget. It can be turned on by &lt;code&gt;getSettings().setJavaScriptEnabled(true)&lt;/code&gt;. I’ve created convenience class &lt;code&gt;WebViewHelper&lt;/code&gt; around &lt;code&gt;android.webkit.WebView&lt;/code&gt; class features.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Using from Android Studio:&lt;/h3&gt;
&lt;p&gt;Add following in your project's &lt;code&gt;build.gradle&lt;/code&gt; under &lt;code&gt;dependencies&lt;/code&gt; block.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;compile &amp;#39;org.ptyagicodecamp:webview-android:0.0.2&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;How to use &lt;code&gt;WebViewHelper&lt;/code&gt; class ?&lt;/h3&gt;
&lt;h5&gt;Initializing&lt;/h5&gt;
&lt;p&gt;You would need to pass reference to &lt;code&gt;WebView&lt;/code&gt; widget into &lt;code&gt;WebViewHelper&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;WebViewHelper webViewHelper;
....

@Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        webView = (WebView) findViewById(R.id.webView);
        //initialize WebViewHelper
        webViewHelper = new WebViewHelper(webView);
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Using library&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public void loadUrl(View view) {
        webViewHelper.loadUrl(&amp;quot;https://ptyagicodecamp.github.io/&amp;quot;);
    }

    public void loadData(View view) {
        webViewHelper.loadData(&amp;quot;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;\&amp;quot;https://ptyagicodecamp.github.io/\&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Click Here to visit my Blog&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&amp;quot;);
    }

    public void toggleJavaScript(View view) {

        if (((ToggleButton)view).isChecked()) {
            webViewHelper.enableJS();
            Toast.makeText(this, &amp;quot;Javascript is enabled&amp;quot;, Toast.LENGTH_LONG).show();
        } else {
            webViewHelper.disableJS();
            Toast.makeText(this, &amp;quot;Javascript is disabled&amp;quot;, Toast.LENGTH_LONG).show();
        }
    }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Source code is available &lt;a href="https://github.com/ptyagicodecamp/webview-android"&gt;here&lt;/a&gt;
&lt;/p&gt;</summary><category term="android"></category><category term="webview"></category><category term="library"></category><category term="open-source"></category><category term="dev"></category></entry><entry><title>My take on Pelican and Github pages from a beginner's perspective</title><link href="http://ptyagicodecamp.github.io/my-take-on-pelican-and-github-pages-from-a-beginners-perspective.html" rel="alternate"></link><published>2016-12-08T10:20:00-07:00</published><updated>2016-12-08T10:20:00-07:00</updated><author><name>ptyagi</name></author><id>tag:ptyagicodecamp.github.io,2016-12-08:my-take-on-pelican-and-github-pages-from-a-beginners-perspective.html</id><summary type="html">&lt;h3&gt;Setting up environment:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First we need a pacakge manager to install necessery tools and packages. I chose Homebrew. Install Homebrew package manager and other needed tools for Mac by pasting this command in terminal:
&lt;code&gt;/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
brew install wget&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, use Homebrew to install python, pip and other related tools. As time of this writing, it will install Python 2.7.12. 
&lt;code&gt;brew install python&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setup  &lt;a href="https://virtualenv.pypa.io/en/stable/"&gt;vitutalenv tool&lt;/a&gt; to keep python installations separate in their own sandbox: &lt;code&gt;pip install virtualenv&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating virtualenv for pelican
    &lt;code&gt;mkdir -p ~/virtualenvs
    cd ~/virtualenvs
    virtualenv pelican
    cd pelican
    source bin/activate&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install pelican: &lt;code&gt;pip install pelican&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Install markdown package: &lt;code&gt;pip install pelican markdown&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Setting up github repos:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;One repo for source code for blog generator: ptyagicodecamp.github.io-src&lt;/li&gt;
&lt;li&gt;One repo for generated html blog contents: ptyagicodecamp.github.io&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Setting up Blog with Pelican:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Clone github source repo into your local working directory:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/ptyagicodecamp/ptyagicodecamp.github.io-src.git githubpages
cd githubpages
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create output directory inside &lt;code&gt;githubpages&lt;/code&gt; directory to hold generated html pages to add it as a git submodule: &lt;code&gt;git submodule add https://github.com/ptyagicodecamp/ptyagicodecamp.github.io.git output&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setup pelican : &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart
&amp;gt; Where do you want to create your new web site? [.]
&amp;gt; What will be the title of this web site? **Title of your blog**   
&amp;gt; Who will be the author of this web site? **your name**
&amp;gt; What will be the default language of this web site? [en]
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) Y
&amp;gt; What is your URL prefix? (see above example; no trailing slash) http://username.github.io
&amp;gt; Do you want to enable article pagination? (Y/n)
&amp;gt; How many articles per page do you want? [10]
&amp;gt; What is your time zone? [Europe/Paris]    America/Mazatlan
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) Y
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) Y
&amp;gt; Do you want to upload your website using FTP? (y/N) N
&amp;gt; Do you want to upload your website using SSH? (y/N) N
&amp;gt; Do you want to upload your website using Dropbox? (y/N) N
&amp;gt; Do you want to upload your website using S3? (y/N) N
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) N
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) Y
&amp;gt; Is this your personal page (username.github.io)? (y/N) Y
Error: [Errno 17] File exists: &amp;#39;~/githubpages/content&amp;#39;
Error: [Errno 17] File exists: &amp;#39;~/githubpages/output&amp;#39;
Done. Your new project is available at ~/githubpages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: Make DELETE_OUTPUT_DIRECTORY = False in publishconf.py to NOT delete output dir, since its a submodule.&lt;/p&gt;
&lt;h3&gt;Writing your first blog post:&lt;/h3&gt;
&lt;p&gt;Don't forget to install Markdown package: &lt;code&gt;pip install Markdown&lt;/code&gt;. Also, don’t overlook that “.md” files needs meta-data at the beginning of file. Failing to do so, would give error that “NameTile” is failing. Meta data looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;Modified&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;publishing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, write your first blog post by typing in terminal(or your faviorite editor) : &lt;code&gt;vi content/&amp;lt;post-name&amp;gt;.md&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note: you're not required to use '.md' formatting, you can also use &lt;code&gt;.rst&lt;/code&gt; formats too.&lt;/p&gt;
&lt;h3&gt;Build, Commit and Push posts :&lt;/h3&gt;
&lt;p&gt;Note: if you run into issue that pelicanconf.py doesn't exist, its because you may not have python environment loaded. You would need to execute this on terminal re-activate environment: source ~/virtualenvs/pelican/bin/activate&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;To generate HTML contents and start local webserver, type this on terminal: 'make html &amp;amp;&amp;amp; make serve`&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate website using: &lt;code&gt;make publish&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Committing to Github:
At this point you can add all contents to github. 
To add submodule in output directory:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd  output
git add .
git commit -m “Adding my contents”
git push -u origin master
cd ..
echo “*.pyc” &amp;gt;&amp;gt; .gitignore #you can also add this by manually editing .gitignore file
git add .
git commit -m “first commit”
git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Visting your Brand new Blog&lt;/h3&gt;
&lt;p&gt;You can visit your blog at https://username.github.io&lt;/p&gt;
&lt;h3&gt;Script to publish and push to github repo automatically:&lt;/h3&gt;
&lt;p&gt;I created &lt;code&gt;publish-n-push.sh&lt;/code&gt; script to automate generating html contents and pushing everything to github:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo &amp;quot;publising changes...&amp;quot;
make html &amp;amp;&amp;amp; make publish
echo &amp;quot;pushing code to source repo...&amp;quot;
git add .
git commit -m &amp;quot;$1&amp;quot;
git push origin master
echo &amp;quot;pushing generated website to github&amp;quot;
cd output
git add .
git commit -m &amp;quot;$1&amp;quot;
git push origin master
cd ..
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using this script: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd githubpages
./publish-n-push.sh &amp;quot;commit-message&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Here's wonderful tutorial about &lt;a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/"&gt;Markdown syntax&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;I refered &lt;a href="https://fedoramagazine.org/make-github-pages-blog-with-pelican/"&gt;this&lt;/a&gt; tutorial as a reference.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="pelican"></category><category term="github"></category><category term="githubpages"></category><category term="python"></category><category term="web"></category><category term="dev"></category></entry></feed>